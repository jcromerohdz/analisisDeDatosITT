{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Introduction to Deep Learning on GPUs\n",
    "\n",
    "Lab created by Jon Barker"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The following timer counts down to a five minute warning before the lab instance shuts down.  You should get a pop up at the five minute warning reminding you to save your work!  If you are about to run out of time, please see the [Post-Lab](#Post-Lab-Summary) section for saving this lab to view offline later."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<iframe id=\"timer\" src=\"timer/timer.html\" width=\"100%\" height=\"120px\"></iframe>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "Before we begin, let's verify [WebSockets](http://en.wikipedia.org/wiki/WebSocket) are working on your system.  To do this, execute the cell block below by giving it focus (clicking on it with your mouse), and hitting Ctrl-Enter, or pressing the play button in the toolbar above.  If all goes well, you should see some output returned below the grey cell.  If not, please consult the [Self-paced Lab Troubleshooting FAQ](https://developer.nvidia.com/self-paced-labs-faq#Troubleshooting) to debug the issue."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The answer should be three: 3\n"
     ]
    }
   ],
   "source": [
    "print \"The answer should be three: \" + str(1+2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's execute the cell below to display information about the GPUs running on the server."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Thu Jul  6 08:04:53 2017       \r\n",
      "+------------------------------------------------------+                       \r\n",
      "| NVIDIA-SMI 346.46     Driver Version: 346.46         |                       \r\n",
      "|-------------------------------+----------------------+----------------------+\r\n",
      "| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\r\n",
      "| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\r\n",
      "|===============================+======================+======================|\r\n",
      "|   0  GRID K520           On   | 0000:00:03.0     Off |                  N/A |\r\n",
      "| N/A   34C    P8    17W / 125W |     10MiB /  4095MiB |      0%      Default |\r\n",
      "+-------------------------------+----------------------+----------------------+\r\n",
      "                                                                               \r\n",
      "+-----------------------------------------------------------------------------+\r\n",
      "| Processes:                                                       GPU Memory |\r\n",
      "|  GPU       PID  Type  Process name                               Usage      |\r\n",
      "|=============================================================================|\r\n",
      "|  No running processes found                                                 |\r\n",
      "+-----------------------------------------------------------------------------+\r\n"
     ]
    }
   ],
   "source": [
    "!nvidia-smi"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction\n",
    "\n",
    "In this class we will introduce the topic of Deep Learning, a rapidly growing segment of Artificial Intelligence.  Deep Learning is increasingly being used to deliver near-human level accuracy in image classification, voice recognition, natural language processing, and more.  In this class we will cover the basics of Deep Learning through some live examples, we will introduce the three major Deep Learning software frameworks and demonstrate why Deep Learning excels when run on GPUs.\n",
    "\n",
    "This introductory class is intended to serve as a first introduction to the concept of Deep Learning and a live tour of the major software frameworks.  There is some complex looking code presented, but it is not necessary to understand this code to complete the class.  There are some times where you will be waiting a couple of minutes for the Deep Learning algorithms to run - feel free to use this time to explore the code.\n",
    "\n",
    "By the end of this class you will hopefully be excited by the potential applications of Deep Learning and have a better idea of which of the frameworks you may want to learn more about in one of our [upcoming follow-on classes](https://developer.nvidia.com/deep-learning-courses)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Demo\n",
    "\n",
    "We will begin with a demonstration that will use a neural network to identify the subject of an image.  Click the button below to upload an image file from your local machine.  If you don't wish to upload an image just skip past this step and we'll randomly choose one of our images for you."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<iframe id=\"upload\" src=\"upload\" width=\"100%\" height=\"200px\"></iframe>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you uploaded your own image, change the `your_image_name` to the new file name in the code below.  \n",
    "\n",
    "To run or execute the cell, click in it and either press the play button in the toolbar at the top, or use Ctrl + Enter on your keyboard.  For this demo and for the rest of the lab, you will know the lab is processing when you see a solid circle in the top-right of the window that looks like this: ![](jupyter_executing.png)\n",
    "Otherwise, when it is idle, you will see the following: ![](jupyter_idle.png)\n",
    "For troubleshooting, please see [Self-paced Lab Troubleshooting FAQ](https://developer.nvidia.com/self-paced-labs-faq#Troubleshooting) to debug the issue.\n",
    "\n",
    "After executing the below cell, it will load the image into memory and display it for you."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nIZGT5szGVDGQTC0eW4vCKLlP7eoXsk/ROnMf+H6C6ZsiTuu6jhCE4+NZgU3SR3j6arq21M8olvD2\nmEnlQUqFPSSlmxdRjQOGVeC8F1UG5hDIWZkGxljVcRGVdpgEUskD7TUQ5WfkIl3PaKSkKbz7XNTI\nPc6fc1ZaYgl71+xh7aC9VEiEeedoJbOzOeGnv/BFfvTyc5w+PcKbwJ3iufP16zd5+/ZDlsGQjHmK\nveOoAoSVeEkIfYUs+ck9FTLnzNnNdS5vTzizucmkBvDcPuz4g3sfcpwy3nRItiWMpojYRA9rU5gb\nxhisz0xGnsZ7cvIsFwvmx8rp1iZFHWCtTyxm99QCeBXT+PSdrvTa5fIJ6eYNJhe+Bn6i94N4jJ+g\nYQF/0ifHINZSr5/BuSHGVEicre61bITp2QtISuTUc9CdOsh6R+UrnM/E9pC2WzAej3F2G4lz2jQj\nDTYw7QxJ+/jOk7o7+OE6KT5kWLVIPibGxxwdPCR0HZdOv8r62o9gqnNgp7SLPeX524oclXbZLnYJ\n4QhjE+tnL5PCkiAaVGT9gIODzMQ84PTzf55FNMznj0hdpl3OmKwJUk2YTzY5PMp06RBfgmCSCOsj\nxysvfY1qvEOmKG3RLns5O4R8QD08h3lyncmgIVdjZvuHDHLLxKmtwv7+LoMBIJ5obmOtUl/XxheJ\nCVLXspw/JLS7zJYtXQgMmoq1yQRTDXi09wCXPtQGFTC2Z6acqLVTgSMjyr7rl73xKdvw/h525BXD\n7+O4PlGF/yMQh1GWT3LlEIiZyvQwjQqoMjohpMKRVcdm5S+fMFL0z6eicjU5n/jVAIiS1CSDJKFF\nbQswia5bMFgaQshUQ0+KkcFwQCTT5Bpy4VrnWilfYun9dCp3oq8W0UV0RjveXA4BtZFQjnD/z8Ax\nn8/UDloyte2l3mYVaNI7H6SkWtlVAlcGvKUThWYAxKh/e0aNtFwymKzmclniaspSMVfRIywTlWMl\nGDGpjz3U3YpBx08BjFXPG4wr+KpCPxYp/GRWQpRsrU5HwVBXhnPrm/z05z/Lj73yCqe3amyOXL9z\nl29du8Y3r93g6qN92tTbWugDqT4/pnxHmv2byyHqi1Anp0ww+nltTca8cOYMF3a2WRvVSF6wbCO/\n98677LcqEkxGff9jmSt7AWHOqaS6qfXFZFgxGtRUtqKdJY4XiUUXVv4s2g1qwtUfv/eHnL/wswyH\n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\nRK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f8269878250>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import os\n",
    "\n",
    "images_upload_dir = \"/home/ubuntu/images/\"\n",
    "your_image_name = \"bee.jpg\"\n",
    "image = images_upload_dir + your_image_name\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "from PIL import Image\n",
    "im = Image.open(image)\n",
    "plt.imshow(im)\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once the image is displayed above, execute the below cell to get some predictions about what the image is showing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "bee 0.984789\r\n",
      "fly 0.0145523\r\n",
      "leaf beetle, chrysomelid 0.000292852\r\n",
      "long-horned beetle, longicorn, longicorn beetle 0.000207962\r\n",
      "ant, emmet, pismire 7.83908e-05\r\n",
      "ladybug, ladybeetle, lady beetle, ladybird, ladybird beetle 3.20379e-05\r\n",
      "honeycomb 1.2666e-05\r\n",
      "lacewing, lacewing fly 1.04656e-05\r\n",
      "cricket 6.43905e-06\r\n",
      "cicada, cicala 4.62695e-06\r\n"
     ]
    }
   ],
   "source": [
    "!/home/ubuntu/notebook/DLIntro/overfeat/bin/linux_64/cuda/overfeat_cuda -l -n 10 $image"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What you see as output are 10 predictions (in order) about the contents of the image produced by a Deep Learning (DL) system called [Overfeat](http://cilvr.nyu.edu/doku.php?id=code:start). Each prediction is of an object which may be present in the image along with the confidence in the predictions.  In machine learning we call these predictions 'classifications'.\n",
    "\n",
    "If you were tasked with writing a computer program to make predictions like this, how would you do it?\n",
    "\n",
    "The traditional approach to this problem taken by the computer vision research community was to hand-craft functions which would look for particular features in the image that were believed to be indicative of certain objects or scenes.  For example, hard corners and straight edges might be believed to indicate the presence of manmade objects in the scene.  The responses from these feature extraction functions would then be fed into another function which would decide whether to declare a particular object had been detected in the image.\n",
    "\n",
    "![Traditional approach](files/DLIntro/tradition.png)\n",
    "\n",
    "<div align=\"center\">*Figure 1: Traditional approach to machine perception - hand-crafted features are extracted from the raw data and is then independently passed to a classification function. This typically leads to brittle and false-alarm prone detectors.*</div>\n",
    "\n",
    "Unfortunately there are a number of problems with this approach.  Firstly, it is very hard to think of robust, reliable features which map to specific object types.  Secondly, it is a massive task to come up with the right combination of features for every type of object you want to be able to classify.  Thirdly, it is very difficult to design functions that are robust to translations, rotations and scalings of objects in the image.  Together these problems resulted in traditional computer vision struggling to develop high accuracy object detectors and classifiers for a broad range of objects.\n",
    "\n",
    "The DL system that you saw demonstrated above was created in a very different way.  No human knowledge was encoded in the DL model about the types and combinations of features that are important for labelling different types of object or scene.  Instead, a combined feature extraction and classification model was learned by allowing the computer to examine millions of ground-truth labelled images to discover which features and combinations of features were most discriminative for each of the object classes (In machine learning we call this 'training' the model).  Furthermore, this was done in such a way that the model didn't just learn to classify the specific objects it was trained on; instead, it abstracted out the essence of those objects in such a way that it could recognize previously unseen but visually similar objects.  This learning process refined tens of millions of free parameters in the DL model above to be able to accurately classify 1000 different object types.  On a traditional CPU based server this training would take weeks to complete.  This network was instead trained in just hours by exploiting GPU acceleration.  Almost all DL systems today exploit massive GPU acceleration to make training practical.\n",
    "\n",
    "![Machine learning approach](files/DLIntro/DL.png)\n",
    "\n",
    "<div align=\"center\">*Figure 2: In the Deep Learning approach the feature extraction and classification functions are simultaneously learned using large amounts of training data.  The learned model can then be deployed in a new workflow where previously unseen data samples are classified.*</div>\n",
    "\n",
    "In this class we are going to take a tour of the technology behind DL and the popular open-source frameworks which make it accessible to researchers and software developers today.  Hopefully by the end of the class you will have an appreciation for the varied applications of DL, the benefits of some of the available DL frameworks and the essential nature of GPU acceleration for training real-world networks in reasonable timeframes."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## What is Deep Learning?\n",
    "\n",
    "Deep Learning (DL) is a branch of artificial intelligence research that is attempting to develop the techniques that will allow computers to learn complex perception tasks such as seeing and hearing at human levels of performance.  Recent advances in DL have yielded startling performance gains in fields such as computer vision, speech recognition and natural language understanding.  DL is already in use today to understand data and user inputs in technologies such as virtual personal assistants and online image search.  DL is an active area of ongoing research where it is envisaged that human level perception of unstructured data will enable technologies such as self-driving cars and truly intelligent machines.\n",
    "\n",
    "DL attempts to use large volumes of unstructured data, such as images and audio clips, to learn hierarchical models which capture the complex structure in the data and then use these models to predict properties of previously unseen data.  For example, DL has proven extremely successful at learning hierarchical models of the visual features and concepts represented in handheld camera images and then using those models to automatically label previously unseen images with the objects present in them.\n",
    "\n",
    "The models learned through DL are biologically inspired artificial neural networks (ANNs).  An ANN is an interconnected group of nodes, akin to the vast network of neurons in a brain. In the image below, each circular node represents an artificial neuron and an arrow represents a connection from the output of one neuron to the input of another.  Input data is fed into the red nodes, and dependent on the weights on the connections between nodes, causes varying levels of activation of the subsequent hidden and output nodes.  In our example above the input nodes would be connected to image pixels and the output nodes would have a one-to-one correspondence with the possible object classes; the job of the hidden nodes is to learn the complex function which maps pixels to object labels. \n",
    "\n",
    "![ANN](files/DLIntro/ANN.png)\n",
    "\n",
    "<div align=\"center\">*Figure 3:  Fully-connected Artificial Neural Network with one hidden layer*</div>\n",
    "\n",
    "For the advanced reader, the activation of a neuron is just a function of a variable which is the weighted sum of the inputs.  For basic neural networks the function is a sigmoid function.  The idea is that if the weighted sum of the inputs exceeds a threshold value, the neuron gives a positive output.\n",
    "\n",
    "For ANNs to be effective in difficult perception tasks, such as object labelling in images, these networks usually have many stacked layers of artificial neurons each with many neurons in the layer.  It is these many wide layers that lead to these networks being labelled Deep Neural Networks (DNNs).  \n",
    "\n",
    "One particular class of DNN which has shown great capability in visual perception tasks is called the Convolutional Neural Network (CNN).  CNNs have a structure which loosely resembles the structure the human visual cortex where lower levels of the model hierarchy are focused on small and local visual details, such as oriented line segments, which aggregate together into higher levels of the model which correspond to complex human concepts, such as faces and animals.\n",
    "\n",
    "![CNN](files/DLIntro/cnn.png)\n",
    "\n",
    "<div align=\"center\">*Figure 4:  Deep Neural Networks learn a hierarchical model of the input data in which the layers correspond to increasingly complex real-world concepts.  The number of parameters in a network is a function of the number of neurons in the network and the architecture of the network connectivity.*</div>\n",
    "\n",
    "The [Imagenet Challenge](http://image-net.org/challenges/LSVRC/2014/index) is an annual competition where competitors are provided with 1.2 million natural images from the internet which are labelled with the objects that appear in those images using 1000 different class labels.  Competitors must create a model using this data which will then be tested against a further 100,000 images to see how accurately the model can identify and localize objects within them.  Over the past few years CNN based approaches have come to dominate the competition with accuracy in the object identification task recently exceeding 95% - which is comparable with human performance in labelling the objects in the test dataset.\n",
    "\n",
    "The mathematics that underpins DL training is predominantly linear matrix algebra.  Computation of this type of mathematics is highly parallelizable making it a perfect fit for acceleration using GPUs.  Training a DNN that can be competitive in the Imagenet challenge is computationally very intensive and would take weeks, months or even years of computation on a CPU based system.  Through massive parallelization, GPUs can reduce this training time to days or even hours. Now almost all entrants into the Imagenet Challenge use GPUs, sometimes many of them, to train CNNs with billions of trainable parameters.  The graph below shows how significant recent improvements in accuracy in the Imagenet challenge correlate with the explosion in the use of GPUs for training DNN entries.\n",
    "\n",
    "![](files/DLIntro/gpuimagenet.png)\n",
    "\n",
    "<div align=\"center\">*Figure 5: The introduction of GPU accelerated Deep Learning into the ImageNet challenge began a period of unprecedented performance improvements.*</div>\n",
    "\n",
    "GPUs are not only far more computationally efficient for training DNNs - they are also far more cost effective at scale.  In 2013 Google built it's \"Google Brain\" - a 1000 server, 16,000 core CPU based cluster for training a state-of-the-art DNN for image understanding.  It cost an estimated \\$5,000,000 to build.  Shortly afterwards a team from the Stanford AI Lab showed that using 3 GPU accelerated servers with 12 GPUs per server - a total of 18,432 cores - they could train the same DNN and achieve the same performance.  Their system cost approximately $33,000 - 150th of the hardware cost and energy usage ([Wired Article](http://www.wired.com/2013/06/andrew_ng/)).\n",
    "\n",
    "![Google Brain vs. Stanford GPUs](files/DLIntro/gbrain.png)\n",
    "\n",
    "<div align=\"center\">*Figure 6: GPUs are the most cost effective and size and power efficient means for training large Deep Neural Networks.*</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Deep Learning Frameworks\n",
    "\n",
    "In recent years a number of software development frameworks have been created to make researching and applying DL more accessible and efficient.  In this class we will introduce three of the current most popular frameworks: Caffe, Theano and Torch.  They all share the common benefits of providing highly optimized GPU enabled code specific to the computations required for training DNNs whilst providing access to that code through simple command line or scripting language interfaces such as Python.  Many powerful DNNs can be trained and deployed using these frameworks without ever having to write any GPU or complex compiled code but whilst still benefiting from the huge training speed-up afforded by GPU acceleration.\n",
    "\n",
    "In order to compare and contrast these frameworks we will look at how you train a CNN in each of the frameworks to automatically classify images of different types."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Framework 1: Caffe\n",
    "\n",
    "[Caffe](http://caffe.berkeleyvision.org/) is a DL framework created by PhD student Yangqing Jia from UC Berkley.  Some of benefits of Caffe to the DL practitioner and researcher:\n",
    "* Caffe is fast due to it's highly optimized C/CUDA backend which integrates GPU acceleration\n",
    "* Caffe is still very accessible due to command line, Python and Matlab interfaces  \n",
    "* The wrapper interfaces make it very easy to integrate DNN training and deployment into larger data analytics workflows  \n",
    "* Caffe has a large open-source development community adding new features all time\n",
    "* Caffe has an associated model-zoo where researchers can upload trained models for others to fine tune or use for inference using their own data\n",
    "\n",
    "You may choose to use Caffe as your DL framework if you fit the following profile:\n",
    "\n",
    "* You are interested in quickly getting up and running training and testing DNNs against your own image datasets without writing a lot of new code\n",
    "* You are a C/CUDA developer wishing to extend DL functionality within a framework\n",
    "\n",
    "One of the key benefits of Caffe for those wishing to apply deep learning to their own data is that defining and building many different types of DNN is possible without ever writing a line of code.  In this section we'll guide you through doing just that.\n",
    "\n",
    "#### Caffe example\n",
    "\n",
    "We're going to work with the well-known [CIFAR-10](http://www.cs.toronto.edu/~kriz/cifar.html) dataset which consists of 60000 32x32 color images split into ten classes: airplane, automobile, bird, cat, deer, dog, frog, horse, ship and truck.  Here are some examples:\n",
    "\n",
    "![](http://www.cs.toronto.edu/~kriz/cifar-10-sample/airplane1.png)![](http://www.cs.toronto.edu/~kriz/cifar-10-sample/automobile10.png) ![](http://www.cs.toronto.edu/~kriz/cifar-10-sample/bird7.png) ![](http://www.cs.toronto.edu/~kriz/cifar-10-sample/cat9.png) ![](http://www.cs.toronto.edu/~kriz/cifar-10-sample/deer6.png) ![](http://www.cs.toronto.edu/~kriz/cifar-10-sample/dog4.png) ![](http://www.cs.toronto.edu/~kriz/cifar-10-sample/horse6.png) ![](http://www.cs.toronto.edu/~kriz/cifar-10-sample/ship1.png) ![](http://www.cs.toronto.edu/~kriz/cifar-10-sample/truck5.png) ![](http://www.cs.toronto.edu/~kriz/cifar-10-sample/airplane4.png) ![](http://www.cs.toronto.edu/~kriz/cifar-10-sample/automobile4.png) ![](http://www.cs.toronto.edu/~kriz/cifar-10-sample/bird1.png) ![](http://www.cs.toronto.edu/~kriz/cifar-10-sample/cat1.png) ![](http://www.cs.toronto.edu/~kriz/cifar-10-sample/deer4.png) ![](http://www.cs.toronto.edu/~kriz/cifar-10-sample/deer8.png) ![](http://www.cs.toronto.edu/~kriz/cifar-10-sample/dog10.png) ![](http://www.cs.toronto.edu/~kriz/cifar-10-sample/ship7.png) ![](http://www.cs.toronto.edu/~kriz/cifar-10-sample/horse4.png)\n",
    "\n",
    "We're working with the smaller CIFAR-10 dataset so that you can actually train a network from start to finish within the time available in this class; however, the CNN we're defining and training exhibits all the essential features of the much larger networks used in the ImageNet challenge.\n",
    "\n",
    "Training a DNN in Caffe requires you to provide three things: a [network definition file](files/caffe/examples/cifar10/cifar10_quick.prototxt) specifying the neural network architecture, a [solver definition file](files/caffe/examples/cifar10/cifar10_quick_solver.prototxt) specifying the training parameters and a dataset.  We've prepared each of these for you and there's no need to change them but you can take a look at them using the links provided.  The network and solver definition files are human readable text files.  Our dataset of images has been preloaded into a database to make it faster to read into Caffe.  \n",
    "\n",
    "In the network definition file we specify the inputs, outputs and structure of each of the layers in the DNN.  Here is an example of how a convolutional layer is defined, which is representative of how all layers are defined:"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "layer {\n",
    "  name: \"conv1\"\n",
    "  type: \"Convolution\"\n",
    "  bottom: \"data\"\n",
    "  top: \"conv1\"\n",
    "  param {\n",
    "    lr_mult: 1\n",
    "  }\n",
    "  param {\n",
    "    lr_mult: 2\n",
    "  }\n",
    "  convolution_param {\n",
    "    num_output: 32\n",
    "    pad: 2\n",
    "    kernel_size: 5\n",
    "    stride: 1\n",
    "  }\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The solver definition file is simply a list of parameters which are passed to the DNN training algorithm.  Here is how the parameters are set in this example:"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "# The train/test net protocol buffer definition\n",
    "net: \"examples/cifar10/cifar10_quick_train_test.prototxt\"\n",
    "# test_iter specifies how many forward passes the test should carry out.\n",
    "# In the case of MNIST, we have test batch size 100 and 100 test iterations,\n",
    "# covering the full 10,000 testing images.\n",
    "test_iter: 100\n",
    "# Carry out testing every 500 training iterations.\n",
    "test_interval: 500\n",
    "# The base learning rate, momentum and the weight decay of the network.\n",
    "base_lr: 0.001\n",
    "momentum: 0.9\n",
    "weight_decay: 0.004\n",
    "# The learning rate policy\n",
    "lr_policy: \"fixed\"\n",
    "# Display every 100 iterations\n",
    "display: 100\n",
    "# The maximum number of iterations\n",
    "max_iter: 4000\n",
    "# snapshot intermediate results\n",
    "snapshot: 4000\n",
    "snapshot_prefix: \"examples/cifar10/cifar10_quick\"\n",
    "# solver mode: CPU or GPU\n",
    "solver_mode: GPU"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The training process consists of first randomly initializing the weights on the connections between neurons in the network whose structure is defined in the network definition file.  Then, one at a time, each image in the training dataset is fed into the network along with its label.  The network guesses the label based purely on the input pixels - this is called classification.  If the guess is wrong then a small modification is made to the weights so that the network will guess more accurately for that image next time it sees it.  This process is repeated many thousands of times until the network converges to a stable average classification accuracy across all the training images.\n",
    "\n",
    "Training the model is as simple as running the cell below.  When you do so, you will see a large number of messages flying by.  First the network will be initialized layer by layer and then training will begin.  After each 100 training iterations you will get an update on the training loss which should be decreasing and after each 500 you will get an update on the accuracy against a test set (Test net output #0) which should be increasing.  An iteration is when the network trains on each image in the training set exactly once.  **Training the network takes a couple of minutes**, so spend the time familiarizing yourself with Caffe's output - keep scrolling to the bottom of the output window to see the latest updates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "libdc1394 error: Failed to initialize libdc1394\n",
      "I0706 08:10:05.559226  6022 caffe.cpp:99] Use GPU with device ID 0\n",
      "I0706 08:10:05.682457  6022 caffe.cpp:107] Starting Optimization\n",
      "I0706 08:10:05.682590  6022 solver.cpp:32] Initializing solver from parameters: \n",
      "test_iter: 100\n",
      "test_interval: 500\n",
      "base_lr: 0.001\n",
      "display: 100\n",
      "max_iter: 4000\n",
      "lr_policy: \"fixed\"\n",
      "momentum: 0.9\n",
      "weight_decay: 0.004\n",
      "snapshot: 4000\n",
      "snapshot_prefix: \"examples/cifar10/cifar10_quick\"\n",
      "solver_mode: GPU\n",
      "net: \"examples/cifar10/cifar10_quick_train_test.prototxt\"\n",
      "I0706 08:10:05.682667  6022 solver.cpp:70] Creating training net from net file: examples/cifar10/cifar10_quick_train_test.prototxt\n",
      "I0706 08:10:05.683109  6022 net.cpp:253] The NetState phase (0) differed from the phase (1) specified by a rule in layer cifar\n",
      "I0706 08:10:05.683145  6022 net.cpp:253] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy\n",
      "I0706 08:10:05.683266  6022 net.cpp:42] Initializing net from parameters: \n",
      "name: \"CIFAR10_quick\"\n",
      "state {\n",
      "  phase: TRAIN\n",
      "}\n",
      "layer {\n",
      "  name: \"cifar\"\n",
      "  type: \"Data\"\n",
      "  top: \"data\"\n",
      "  top: \"label\"\n",
      "  include {\n",
      "    phase: TRAIN\n",
      "  }\n",
      "  transform_param {\n",
      "    mean_file: \"examples/cifar10/mean.binaryproto\"\n",
      "  }\n",
      "  data_param {\n",
      "    source: \"examples/cifar10/cifar10_train_lmdb\"\n",
      "    batch_size: 100\n",
      "    backend: LMDB\n",
      "  }\n",
      "}\n",
      "layer {\n",
      "  name: \"conv1\"\n",
      "  type: \"Convolution\"\n",
      "  bottom: \"data\"\n",
      "  top: \"conv1\"\n",
      "  param {\n",
      "    lr_mult: 1\n",
      "  }\n",
      "  param {\n",
      "    lr_mult: 2\n",
      "  }\n",
      "  convolution_param {\n",
      "    num_output: 32\n",
      "    pad: 2\n",
      "    kernel_size: 5\n",
      "    stride: 1\n",
      "    weight_filler {\n",
      "      type: \"gaussian\"\n",
      "      std: 0.0001\n",
      "    }\n",
      "    bias_filler {\n",
      "      type: \"constant\"\n",
      "    }\n",
      "  }\n",
      "}\n",
      "layer {\n",
      "  name: \"pool1\"\n",
      "  type: \"Pooling\"\n",
      "  bottom: \"conv1\"\n",
      "  top: \"pool1\"\n",
      "  pooling_param {\n",
      "    pool: MAX\n",
      "    kernel_size: 3\n",
      "    stride: 2\n",
      "  }\n",
      "}\n",
      "layer {\n",
      "  name: \"relu1\"\n",
      "  type: \"ReLU\"\n",
      "  bottom: \"pool1\"\n",
      "  top: \"pool1\"\n",
      "}\n",
      "layer {\n",
      "  name: \"conv2\"\n",
      "  type: \"Convolution\"\n",
      "  bottom: \"pool1\"\n",
      "  top: \"conv2\"\n",
      "  param {\n",
      "    lr_mult: 1\n",
      "  }\n",
      "  param {\n",
      "    lr_mult: 2\n",
      "  }\n",
      "  convolution_param {\n",
      "    num_output: 32\n",
      "    pad: 2\n",
      "    kernel_size: 5\n",
      "    stride: 1\n",
      "    weight_filler {\n",
      "      type: \"gaussian\"\n",
      "      std: 0.01\n",
      "    }\n",
      "    bias_filler {\n",
      "      type: \"constant\"\n",
      "    }\n",
      "  }\n",
      "}\n",
      "layer {\n",
      "  name: \"relu2\"\n",
      "  type: \"ReLU\"\n",
      "  bottom: \"conv2\"\n",
      "  top: \"conv2\"\n",
      "}\n",
      "layer {\n",
      "  name: \"pool2\"\n",
      "  type: \"Pooling\"\n",
      "  bottom: \"conv2\"\n",
      "  top: \"pool2\"\n",
      "  pooling_param {\n",
      "    pool: AVE\n",
      "    kernel_size: 3\n",
      "    stride: 2\n",
      "  }\n",
      "}\n",
      "layer {\n",
      "  name: \"conv3\"\n",
      "  type: \"Convolution\"\n",
      "  bottom: \"pool2\"\n",
      "  top: \"conv3\"\n",
      "  param {\n",
      "    lr_mult: 1\n",
      "  }\n",
      "  param {\n",
      "    lr_mult: 2\n",
      "  }\n",
      "  convolution_param {\n",
      "    num_output: 64\n",
      "    pad: 2\n",
      "    kernel_size: 5\n",
      "    stride: 1\n",
      "    weight_filler {\n",
      "      type: \"gaussian\"\n",
      "      std: 0.01\n",
      "    }\n",
      "    bias_filler {\n",
      "      type: \"constant\"\n",
      "    }\n",
      "  }\n",
      "}\n",
      "layer {\n",
      "  name: \"relu3\"\n",
      "  type: \"ReLU\"\n",
      "  bottom: \"conv3\"\n",
      "  top: \"conv3\"\n",
      "}\n",
      "layer {\n",
      "  name: \"pool3\"\n",
      "  type: \"Pooling\"\n",
      "  bottom: \"conv3\"\n",
      "  top: \"pool3\"\n",
      "  pooling_param {\n",
      "    pool: AVE\n",
      "    kernel_size: 3\n",
      "    stride: 2\n",
      "  }\n",
      "}\n",
      "layer {\n",
      "  name: \"ip1\"\n",
      "  type: \"InnerProduct\"\n",
      "  bottom: \"pool3\"\n",
      "  top: \"ip1\"\n",
      "  param {\n",
      "    lr_mult: 1\n",
      "  }\n",
      "  param {\n",
      "    lr_mult: 2\n",
      "  }\n",
      "  inner_product_param {\n",
      "    num_output: 64\n",
      "    weight_filler {\n",
      "      type: \"gaussian\"\n",
      "      std: 0.1\n",
      "    }\n",
      "    bias_filler {\n",
      "      type: \"constant\"\n",
      "    }\n",
      "  }\n",
      "}\n",
      "layer {\n",
      "  name: \"ip2\"\n",
      "  type: \"InnerProduct\"\n",
      "  bottom: \"ip1\"\n",
      "  top: \"ip2\"\n",
      "  param {\n",
      "    lr_mult: 1\n",
      "  }\n",
      "  param {\n",
      "    lr_mult: 2\n",
      "  }\n",
      "  inner_product_param {\n",
      "    num_output: 10\n",
      "    weight_filler {\n",
      "      type: \"gaussian\"\n",
      "      std: 0.1\n",
      "    }\n",
      "    bias_filler {\n",
      "      type: \"constant\"\n",
      "    }\n",
      "  }\n",
      "}\n",
      "layer {\n",
      "  name: \"loss\"\n",
      "  type: \"SoftmaxWithLoss\"\n",
      "  bottom: \"ip2\"\n",
      "  bottom: \"label\"\n",
      "  top: \"loss\"\n",
      "}\n",
      "I0706 08:10:05.683909  6022 layer_factory.hpp:74] Creating layer cifar\n",
      "I0706 08:10:05.683939  6022 net.cpp:76] Creating Layer cifar\n",
      "I0706 08:10:05.683954  6022 net.cpp:334] cifar -> data\n",
      "I0706 08:10:05.683993  6022 net.cpp:334] cifar -> label\n",
      "I0706 08:10:05.684012  6022 net.cpp:105] Setting up cifar\n",
      "I0706 08:10:05.684108  6022 db.cpp:34] Opened lmdb examples/cifar10/cifar10_train_lmdb\n",
      "I0706 08:10:05.684165  6022 data_layer.cpp:67] output data size: 100,3,32,32\n",
      "I0706 08:10:05.684183  6022 data_transformer.cpp:22] Loading mean file from: examples/cifar10/mean.binaryproto\n",
      "I0706 08:10:05.685178  6022 net.cpp:112] Top shape: 100 3 32 32 (307200)\n",
      "I0706 08:10:05.685204  6022 net.cpp:112] Top shape: 100 1 1 1 (100)\n",
      "I0706 08:10:05.685215  6022 layer_factory.hpp:74] Creating layer conv1\n",
      "I0706 08:10:05.685235  6022 net.cpp:76] Creating Layer conv1\n",
      "I0706 08:10:05.685247  6022 net.cpp:372] conv1 <- data\n",
      "I0706 08:10:05.685266  6022 net.cpp:334] conv1 -> conv1\n",
      "I0706 08:10:05.685284  6022 net.cpp:105] Setting up conv1\n",
      "I0706 08:10:05.739744  6022 net.cpp:112] Top shape: 100 32 32 32 (3276800)\n",
      "I0706 08:10:05.739820  6022 layer_factory.hpp:74] Creating layer pool1\n",
      "I0706 08:10:05.739848  6022 net.cpp:76] Creating Layer pool1\n",
      "I0706 08:10:05.739864  6022 net.cpp:372] pool1 <- conv1\n",
      "I0706 08:10:05.739878  6022 net.cpp:334] pool1 -> pool1\n",
      "I0706 08:10:05.739894  6022 net.cpp:105] Setting up pool1\n",
      "I0706 08:10:05.740053  6022 net.cpp:112] Top shape: 100 32 16 16 (819200)\n",
      "I0706 08:10:05.740072  6022 layer_factory.hpp:74] Creating layer relu1\n",
      "I0706 08:10:05.740084  6022 net.cpp:76] Creating Layer relu1\n",
      "I0706 08:10:05.740093  6022 net.cpp:372] relu1 <- pool1\n",
      "I0706 08:10:05.740103  6022 net.cpp:323] relu1 -> pool1 (in-place)\n",
      "I0706 08:10:05.740115  6022 net.cpp:105] Setting up relu1\n",
      "I0706 08:10:05.740167  6022 net.cpp:112] Top shape: 100 32 16 16 (819200)\n",
      "I0706 08:10:05.740180  6022 layer_factory.hpp:74] Creating layer conv2\n",
      "I0706 08:10:05.740196  6022 net.cpp:76] Creating Layer conv2\n",
      "I0706 08:10:05.740206  6022 net.cpp:372] conv2 <- pool1\n",
      "I0706 08:10:05.740216  6022 net.cpp:334] conv2 -> conv2\n",
      "I0706 08:10:05.740231  6022 net.cpp:105] Setting up conv2\n",
      "I0706 08:10:05.741406  6022 net.cpp:112] Top shape: 100 32 16 16 (819200)\n",
      "I0706 08:10:05.741439  6022 layer_factory.hpp:74] Creating layer relu2\n",
      "I0706 08:10:05.741452  6022 net.cpp:76] Creating Layer relu2\n",
      "I0706 08:10:05.741462  6022 net.cpp:372] relu2 <- conv2\n",
      "I0706 08:10:05.741473  6022 net.cpp:323] relu2 -> conv2 (in-place)\n",
      "I0706 08:10:05.741484  6022 net.cpp:105] Setting up relu2\n",
      "I0706 08:10:05.741530  6022 net.cpp:112] Top shape: 100 32 16 16 (819200)\n",
      "I0706 08:10:05.741541  6022 layer_factory.hpp:74] Creating layer pool2\n",
      "I0706 08:10:05.741554  6022 net.cpp:76] Creating Layer pool2\n",
      "I0706 08:10:05.741561  6022 net.cpp:372] pool2 <- conv2\n",
      "I0706 08:10:05.741572  6022 net.cpp:334] pool2 -> pool2\n",
      "I0706 08:10:05.741583  6022 net.cpp:105] Setting up pool2\n",
      "I0706 08:10:05.741706  6022 net.cpp:112] Top shape: 100 32 8 8 (204800)\n",
      "I0706 08:10:05.741724  6022 layer_factory.hpp:74] Creating layer conv3\n",
      "I0706 08:10:05.741736  6022 net.cpp:76] Creating Layer conv3\n",
      "I0706 08:10:05.741745  6022 net.cpp:372] conv3 <- pool2\n",
      "I0706 08:10:05.741757  6022 net.cpp:334] conv3 -> conv3\n",
      "I0706 08:10:05.741770  6022 net.cpp:105] Setting up conv3\n",
      "I0706 08:10:05.743801  6022 net.cpp:112] Top shape: 100 64 8 8 (409600)\n",
      "I0706 08:10:05.743834  6022 layer_factory.hpp:74] Creating layer relu3\n",
      "I0706 08:10:05.743849  6022 net.cpp:76] Creating Layer relu3\n",
      "I0706 08:10:05.743858  6022 net.cpp:372] relu3 <- conv3\n",
      "I0706 08:10:05.743868  6022 net.cpp:323] relu3 -> conv3 (in-place)\n",
      "I0706 08:10:05.743880  6022 net.cpp:105] Setting up relu3\n",
      "I0706 08:10:05.743927  6022 net.cpp:112] Top shape: 100 64 8 8 (409600)\n",
      "I0706 08:10:05.743939  6022 layer_factory.hpp:74] Creating layer pool3\n",
      "I0706 08:10:05.743950  6022 net.cpp:76] Creating Layer pool3\n",
      "I0706 08:10:05.743959  6022 net.cpp:372] pool3 <- conv3\n",
      "I0706 08:10:05.743969  6022 net.cpp:334] pool3 -> pool3\n",
      "I0706 08:10:05.743980  6022 net.cpp:105] Setting up pool3\n",
      "I0706 08:10:05.744036  6022 net.cpp:112] Top shape: 100 64 4 4 (102400)\n",
      "I0706 08:10:05.744048  6022 layer_factory.hpp:74] Creating layer ip1\n",
      "I0706 08:10:05.744068  6022 net.cpp:76] Creating Layer ip1\n",
      "I0706 08:10:05.744078  6022 net.cpp:372] ip1 <- pool3\n",
      "I0706 08:10:05.744092  6022 net.cpp:334] ip1 -> ip1\n",
      "I0706 08:10:05.744109  6022 net.cpp:105] Setting up ip1\n",
      "I0706 08:10:05.746326  6022 net.cpp:112] Top shape: 100 64 1 1 (6400)\n",
      "I0706 08:10:05.746357  6022 layer_factory.hpp:74] Creating layer ip2\n",
      "I0706 08:10:05.746373  6022 net.cpp:76] Creating Layer ip2\n",
      "I0706 08:10:05.746382  6022 net.cpp:372] ip2 <- ip1\n",
      "I0706 08:10:05.746424  6022 net.cpp:334] ip2 -> ip2\n",
      "I0706 08:10:05.746438  6022 net.cpp:105] Setting up ip2\n",
      "I0706 08:10:05.746474  6022 net.cpp:112] Top shape: 100 10 1 1 (1000)\n",
      "I0706 08:10:05.746490  6022 layer_factory.hpp:74] Creating layer loss\n",
      "I0706 08:10:05.746505  6022 net.cpp:76] Creating Layer loss\n",
      "I0706 08:10:05.746515  6022 net.cpp:372] loss <- ip2\n",
      "I0706 08:10:05.746525  6022 net.cpp:372] loss <- label\n",
      "I0706 08:10:05.746536  6022 net.cpp:334] loss -> loss\n",
      "I0706 08:10:05.746551  6022 net.cpp:105] Setting up loss\n",
      "I0706 08:10:05.746567  6022 layer_factory.hpp:74] Creating layer loss\n",
      "I0706 08:10:05.746647  6022 net.cpp:112] Top shape: 1 1 1 1 (1)\n",
      "I0706 08:10:05.746660  6022 net.cpp:118]     with loss weight 1\n",
      "I0706 08:10:05.746690  6022 net.cpp:163] loss needs backward computation.\n",
      "I0706 08:10:05.746698  6022 net.cpp:163] ip2 needs backward computation.\n",
      "I0706 08:10:05.746706  6022 net.cpp:163] ip1 needs backward computation.\n",
      "I0706 08:10:05.746714  6022 net.cpp:163] pool3 needs backward computation.\n",
      "I0706 08:10:05.746722  6022 net.cpp:163] relu3 needs backward computation.\n",
      "I0706 08:10:05.746731  6022 net.cpp:163] conv3 needs backward computation.\n",
      "I0706 08:10:05.746739  6022 net.cpp:163] pool2 needs backward computation.\n",
      "I0706 08:10:05.746747  6022 net.cpp:163] relu2 needs backward computation.\n",
      "I0706 08:10:05.746754  6022 net.cpp:163] conv2 needs backward computation.\n",
      "I0706 08:10:05.746762  6022 net.cpp:163] relu1 needs backward computation.\n",
      "I0706 08:10:05.746770  6022 net.cpp:163] pool1 needs backward computation.\n",
      "I0706 08:10:05.746778  6022 net.cpp:163] conv1 needs backward computation.\n",
      "I0706 08:10:05.746786  6022 net.cpp:165] cifar does not need backward computation.\n",
      "I0706 08:10:05.746794  6022 net.cpp:201] This network produces output loss\n",
      "I0706 08:10:05.746809  6022 net.cpp:446] Collecting Learning Rate and Weight Decay.\n",
      "I0706 08:10:05.746824  6022 net.cpp:213] Network initialization done.\n",
      "I0706 08:10:05.746834  6022 net.cpp:214] Memory required for data: 31978804\n",
      "I0706 08:10:05.747220  6022 solver.cpp:154] Creating test net (#0) specified by net file: examples/cifar10/cifar10_quick_train_test.prototxt\n",
      "I0706 08:10:05.747267  6022 net.cpp:253] The NetState phase (1) differed from the phase (0) specified by a rule in layer cifar\n",
      "I0706 08:10:05.747392  6022 net.cpp:42] Initializing net from parameters: \n",
      "name: \"CIFAR10_quick\"\n",
      "state {\n",
      "  phase: TEST\n",
      "}\n",
      "layer {\n",
      "  name: \"cifar\"\n",
      "  type: \"Data\"\n",
      "  top: \"data\"\n",
      "  top: \"label\"\n",
      "  include {\n",
      "    phase: TEST\n",
      "  }\n",
      "  transform_param {\n",
      "    mean_file: \"examples/cifar10/mean.binaryproto\"\n",
      "  }\n",
      "  data_param {\n",
      "    source: \"examples/cifar10/cifar10_test_lmdb\"\n",
      "    batch_size: 100\n",
      "    backend: LMDB\n",
      "  }\n",
      "}\n",
      "layer {\n",
      "  name: \"conv1\"\n",
      "  type: \"Convolution\"\n",
      "  bottom: \"data\"\n",
      "  top: \"conv1\"\n",
      "  param {\n",
      "    lr_mult: 1\n",
      "  }\n",
      "  param {\n",
      "    lr_mult: 2\n",
      "  }\n",
      "  convolution_param {\n",
      "    num_output: 32\n",
      "    pad: 2\n",
      "    kernel_size: 5\n",
      "    stride: 1\n",
      "    weight_filler {\n",
      "      type: \"gaussian\"\n",
      "      std: 0.0001\n",
      "    }\n",
      "    bias_filler {\n",
      "      type: \"constant\"\n",
      "    }\n",
      "  }\n",
      "}\n",
      "layer {\n",
      "  name: \"pool1\"\n",
      "  type: \"Pooling\"\n",
      "  bottom: \"conv1\"\n",
      "  top: \"pool1\"\n",
      "  pooling_param {\n",
      "    pool: MAX\n",
      "    kernel_size: 3\n",
      "    stride: 2\n",
      "  }\n",
      "}\n",
      "layer {\n",
      "  name: \"relu1\"\n",
      "  type: \"ReLU\"\n",
      "  bottom: \"pool1\"\n",
      "  top: \"pool1\"\n",
      "}\n",
      "layer {\n",
      "  name: \"conv2\"\n",
      "  type: \"Convolution\"\n",
      "  bottom: \"pool1\"\n",
      "  top: \"conv2\"\n",
      "  param {\n",
      "    lr_mult: 1\n",
      "  }\n",
      "  param {\n",
      "    lr_mult: 2\n",
      "  }\n",
      "  convolution_param {\n",
      "    num_output: 32\n",
      "    pad: 2\n",
      "    kernel_size: 5\n",
      "    stride: 1\n",
      "    weight_filler {\n",
      "      type: \"gaussian\"\n",
      "      std: 0.01\n",
      "    }\n",
      "    bias_filler {\n",
      "      type: \"constant\"\n",
      "    }\n",
      "  }\n",
      "}\n",
      "layer {\n",
      "  name: \"relu2\"\n",
      "  type: \"ReLU\"\n",
      "  bottom: \"conv2\"\n",
      "  top: \"conv2\"\n",
      "}\n",
      "layer {\n",
      "  name: \"pool2\"\n",
      "  type: \"Pooling\"\n",
      "  bottom: \"conv2\"\n",
      "  top: \"pool2\"\n",
      "  pooling_param {\n",
      "    pool: AVE\n",
      "    kernel_size: 3\n",
      "    stride: 2\n",
      "  }\n",
      "}\n",
      "layer {\n",
      "  name: \"conv3\"\n",
      "  type: \"Convolution\"\n",
      "  bottom: \"pool2\"\n",
      "  top: \"conv3\"\n",
      "  param {\n",
      "    lr_mult: 1\n",
      "  }\n",
      "  param {\n",
      "    lr_mult: 2\n",
      "  }\n",
      "  convolution_param {\n",
      "    num_output: 64\n",
      "    pad: 2\n",
      "    kernel_size: 5\n",
      "    stride: 1\n",
      "    weight_filler {\n",
      "      type: \"gaussian\"\n",
      "      std: 0.01\n",
      "    }\n",
      "    bias_filler {\n",
      "      type: \"constant\"\n",
      "    }\n",
      "  }\n",
      "}\n",
      "layer {\n",
      "  name: \"relu3\"\n",
      "  type: \"ReLU\"\n",
      "  bottom: \"conv3\"\n",
      "  top: \"conv3\"\n",
      "}\n",
      "layer {\n",
      "  name: \"pool3\"\n",
      "  type: \"Pooling\"\n",
      "  bottom: \"conv3\"\n",
      "  top: \"pool3\"\n",
      "  pooling_param {\n",
      "    pool: AVE\n",
      "    kernel_size: 3\n",
      "    stride: 2\n",
      "  }\n",
      "}\n",
      "layer {\n",
      "  name: \"ip1\"\n",
      "  type: \"InnerProduct\"\n",
      "  bottom: \"pool3\"\n",
      "  top: \"ip1\"\n",
      "  param {\n",
      "    lr_mult: 1\n",
      "  }\n",
      "  param {\n",
      "    lr_mult: 2\n",
      "  }\n",
      "  inner_product_param {\n",
      "    num_output: 64\n",
      "    weight_filler {\n",
      "      type: \"gaussian\"\n",
      "      std: 0.1\n",
      "    }\n",
      "    bias_filler {\n",
      "      type: \"constant\"\n",
      "    }\n",
      "  }\n",
      "}\n",
      "layer {\n",
      "  name: \"ip2\"\n",
      "  type: \"InnerProduct\"\n",
      "  bottom: \"ip1\"\n",
      "  top: \"ip2\"\n",
      "  param {\n",
      "    lr_mult: 1\n",
      "  }\n",
      "  param {\n",
      "    lr_mult: 2\n",
      "  }\n",
      "  inner_product_param {\n",
      "    num_output: 10\n",
      "    weight_filler {\n",
      "      type: \"gaussian\"\n",
      "      std: 0.1\n",
      "    }\n",
      "    bias_filler {\n",
      "      type: \"constant\"\n",
      "    }\n",
      "  }\n",
      "}\n",
      "layer {\n",
      "  name: \"accuracy\"\n",
      "  type: \"Accuracy\"\n",
      "  bottom: \"ip2\"\n",
      "  bottom: \"label\"\n",
      "  top: \"accuracy\"\n",
      "  include {\n",
      "    phase: TEST\n",
      "  }\n",
      "}\n",
      "layer {\n",
      "  name: \"loss\"\n",
      "  type: \"SoftmaxWithLoss\"\n",
      "  bottom: \"ip2\"\n",
      "  bottom: \"label\"\n",
      "  top: \"loss\"\n",
      "}\n",
      "I0706 08:10:05.748056  6022 layer_factory.hpp:74] Creating layer cifar\n",
      "I0706 08:10:05.748075  6022 net.cpp:76] Creating Layer cifar\n",
      "I0706 08:10:05.748085  6022 net.cpp:334] cifar -> data\n",
      "I0706 08:10:05.748098  6022 net.cpp:334] cifar -> label\n",
      "I0706 08:10:05.748111  6022 net.cpp:105] Setting up cifar\n",
      "I0706 08:10:05.748159  6022 db.cpp:34] Opened lmdb examples/cifar10/cifar10_test_lmdb\n",
      "I0706 08:10:05.748191  6022 data_layer.cpp:67] output data size: 100,3,32,32\n",
      "I0706 08:10:05.748205  6022 data_transformer.cpp:22] Loading mean file from: examples/cifar10/mean.binaryproto\n",
      "I0706 08:10:05.748658  6022 net.cpp:112] Top shape: 100 3 32 32 (307200)\n",
      "I0706 08:10:05.748680  6022 net.cpp:112] Top shape: 100 1 1 1 (100)\n",
      "I0706 08:10:05.748692  6022 layer_factory.hpp:74] Creating layer label_cifar_1_split\n",
      "I0706 08:10:05.748709  6022 net.cpp:76] Creating Layer label_cifar_1_split\n",
      "I0706 08:10:05.748718  6022 net.cpp:372] label_cifar_1_split <- label\n",
      "I0706 08:10:05.748729  6022 net.cpp:334] label_cifar_1_split -> label_cifar_1_split_0\n",
      "I0706 08:10:05.748742  6022 net.cpp:334] label_cifar_1_split -> label_cifar_1_split_1\n",
      "I0706 08:10:05.748754  6022 net.cpp:105] Setting up label_cifar_1_split\n",
      "I0706 08:10:05.748766  6022 net.cpp:112] Top shape: 100 1 1 1 (100)\n",
      "I0706 08:10:05.748775  6022 net.cpp:112] Top shape: 100 1 1 1 (100)\n",
      "I0706 08:10:05.748783  6022 layer_factory.hpp:74] Creating layer conv1\n",
      "I0706 08:10:05.748797  6022 net.cpp:76] Creating Layer conv1\n",
      "I0706 08:10:05.748806  6022 net.cpp:372] conv1 <- data\n",
      "I0706 08:10:05.748819  6022 net.cpp:334] conv1 -> conv1\n",
      "I0706 08:10:05.748832  6022 net.cpp:105] Setting up conv1\n",
      "I0706 08:10:05.749169  6022 net.cpp:112] Top shape: 100 32 32 32 (3276800)\n",
      "I0706 08:10:05.749202  6022 layer_factory.hpp:74] Creating layer pool1\n",
      "I0706 08:10:05.749215  6022 net.cpp:76] Creating Layer pool1\n",
      "I0706 08:10:05.749224  6022 net.cpp:372] pool1 <- conv1\n",
      "I0706 08:10:05.749234  6022 net.cpp:334] pool1 -> pool1\n",
      "I0706 08:10:05.749246  6022 net.cpp:105] Setting up pool1\n",
      "I0706 08:10:05.749392  6022 net.cpp:112] Top shape: 100 32 16 16 (819200)\n",
      "I0706 08:10:05.749409  6022 layer_factory.hpp:74] Creating layer relu1\n",
      "I0706 08:10:05.749423  6022 net.cpp:76] Creating Layer relu1\n",
      "I0706 08:10:05.749433  6022 net.cpp:372] relu1 <- pool1\n",
      "I0706 08:10:05.749444  6022 net.cpp:323] relu1 -> pool1 (in-place)\n",
      "I0706 08:10:05.749454  6022 net.cpp:105] Setting up relu1\n",
      "I0706 08:10:05.749507  6022 net.cpp:112] Top shape: 100 32 16 16 (819200)\n",
      "I0706 08:10:05.749519  6022 layer_factory.hpp:74] Creating layer conv2\n",
      "I0706 08:10:05.749531  6022 net.cpp:76] Creating Layer conv2\n",
      "I0706 08:10:05.749541  6022 net.cpp:372] conv2 <- pool1\n",
      "I0706 08:10:05.749550  6022 net.cpp:334] conv2 -> conv2\n",
      "I0706 08:10:05.749563  6022 net.cpp:105] Setting up conv2\n",
      "I0706 08:10:05.750672  6022 net.cpp:112] Top shape: 100 32 16 16 (819200)\n",
      "I0706 08:10:05.750705  6022 layer_factory.hpp:74] Creating layer relu2\n",
      "I0706 08:10:05.750718  6022 net.cpp:76] Creating Layer relu2\n",
      "I0706 08:10:05.750741  6022 net.cpp:372] relu2 <- conv2\n",
      "I0706 08:10:05.750756  6022 net.cpp:323] relu2 -> conv2 (in-place)\n",
      "I0706 08:10:05.750766  6022 net.cpp:105] Setting up relu2\n",
      "I0706 08:10:05.750823  6022 net.cpp:112] Top shape: 100 32 16 16 (819200)\n",
      "I0706 08:10:05.750835  6022 layer_factory.hpp:74] Creating layer pool2\n",
      "I0706 08:10:05.750849  6022 net.cpp:76] Creating Layer pool2\n",
      "I0706 08:10:05.750857  6022 net.cpp:372] pool2 <- conv2\n",
      "I0706 08:10:05.750869  6022 net.cpp:334] pool2 -> pool2\n",
      "I0706 08:10:05.750880  6022 net.cpp:105] Setting up pool2\n",
      "I0706 08:10:05.750932  6022 net.cpp:112] Top shape: 100 32 8 8 (204800)\n",
      "I0706 08:10:05.750944  6022 layer_factory.hpp:74] Creating layer conv3\n",
      "I0706 08:10:05.750959  6022 net.cpp:76] Creating Layer conv3\n",
      "I0706 08:10:05.750968  6022 net.cpp:372] conv3 <- pool2\n",
      "I0706 08:10:05.750979  6022 net.cpp:334] conv3 -> conv3\n",
      "I0706 08:10:05.750993  6022 net.cpp:105] Setting up conv3\n",
      "I0706 08:10:05.752970  6022 net.cpp:112] Top shape: 100 64 8 8 (409600)\n",
      "I0706 08:10:05.753005  6022 layer_factory.hpp:74] Creating layer relu3\n",
      "I0706 08:10:05.753018  6022 net.cpp:76] Creating Layer relu3\n",
      "I0706 08:10:05.753027  6022 net.cpp:372] relu3 <- conv3\n",
      "I0706 08:10:05.753037  6022 net.cpp:323] relu3 -> conv3 (in-place)\n",
      "I0706 08:10:05.753048  6022 net.cpp:105] Setting up relu3\n",
      "I0706 08:10:05.753180  6022 net.cpp:112] Top shape: 100 64 8 8 (409600)\n",
      "I0706 08:10:05.753196  6022 layer_factory.hpp:74] Creating layer pool3\n",
      "I0706 08:10:05.753211  6022 net.cpp:76] Creating Layer pool3\n",
      "I0706 08:10:05.753219  6022 net.cpp:372] pool3 <- conv3\n",
      "I0706 08:10:05.753231  6022 net.cpp:334] pool3 -> pool3\n",
      "I0706 08:10:05.753243  6022 net.cpp:105] Setting up pool3\n",
      "I0706 08:10:05.753298  6022 net.cpp:112] Top shape: 100 64 4 4 (102400)\n",
      "I0706 08:10:05.753309  6022 layer_factory.hpp:74] Creating layer ip1\n",
      "I0706 08:10:05.753322  6022 net.cpp:76] Creating Layer ip1\n",
      "I0706 08:10:05.753331  6022 net.cpp:372] ip1 <- pool3\n",
      "I0706 08:10:05.753342  6022 net.cpp:334] ip1 -> ip1\n",
      "I0706 08:10:05.753355  6022 net.cpp:105] Setting up ip1\n",
      "I0706 08:10:05.755528  6022 net.cpp:112] Top shape: 100 64 1 1 (6400)\n",
      "I0706 08:10:05.755555  6022 layer_factory.hpp:74] Creating layer ip2\n",
      "I0706 08:10:05.755568  6022 net.cpp:76] Creating Layer ip2\n",
      "I0706 08:10:05.755578  6022 net.cpp:372] ip2 <- ip1\n",
      "I0706 08:10:05.755590  6022 net.cpp:334] ip2 -> ip2\n",
      "I0706 08:10:05.755602  6022 net.cpp:105] Setting up ip2\n",
      "I0706 08:10:05.755640  6022 net.cpp:112] Top shape: 100 10 1 1 (1000)\n",
      "I0706 08:10:05.755658  6022 layer_factory.hpp:74] Creating layer ip2_ip2_0_split\n",
      "I0706 08:10:05.755669  6022 net.cpp:76] Creating Layer ip2_ip2_0_split\n",
      "I0706 08:10:05.755678  6022 net.cpp:372] ip2_ip2_0_split <- ip2\n",
      "I0706 08:10:05.755690  6022 net.cpp:334] ip2_ip2_0_split -> ip2_ip2_0_split_0\n",
      "I0706 08:10:05.755702  6022 net.cpp:334] ip2_ip2_0_split -> ip2_ip2_0_split_1\n",
      "I0706 08:10:05.755713  6022 net.cpp:105] Setting up ip2_ip2_0_split\n",
      "I0706 08:10:05.755724  6022 net.cpp:112] Top shape: 100 10 1 1 (1000)\n",
      "I0706 08:10:05.755733  6022 net.cpp:112] Top shape: 100 10 1 1 (1000)\n",
      "I0706 08:10:05.755741  6022 layer_factory.hpp:74] Creating layer accuracy\n",
      "I0706 08:10:05.755754  6022 net.cpp:76] Creating Layer accuracy\n",
      "I0706 08:10:05.755764  6022 net.cpp:372] accuracy <- ip2_ip2_0_split_0\n",
      "I0706 08:10:05.755774  6022 net.cpp:372] accuracy <- label_cifar_1_split_0\n",
      "I0706 08:10:05.755784  6022 net.cpp:334] accuracy -> accuracy\n",
      "I0706 08:10:05.755795  6022 net.cpp:105] Setting up accuracy\n",
      "I0706 08:10:05.755807  6022 net.cpp:112] Top shape: 1 1 1 1 (1)\n",
      "I0706 08:10:05.755816  6022 layer_factory.hpp:74] Creating layer loss\n",
      "I0706 08:10:05.755831  6022 net.cpp:76] Creating Layer loss\n",
      "I0706 08:10:05.755841  6022 net.cpp:372] loss <- ip2_ip2_0_split_1\n",
      "I0706 08:10:05.755849  6022 net.cpp:372] loss <- label_cifar_1_split_1\n",
      "I0706 08:10:05.755859  6022 net.cpp:334] loss -> loss\n",
      "I0706 08:10:05.755870  6022 net.cpp:105] Setting up loss\n",
      "I0706 08:10:05.755880  6022 layer_factory.hpp:74] Creating layer loss\n",
      "I0706 08:10:05.755949  6022 net.cpp:112] Top shape: 1 1 1 1 (1)\n",
      "I0706 08:10:05.755961  6022 net.cpp:118]     with loss weight 1\n",
      "I0706 08:10:05.755988  6022 net.cpp:163] loss needs backward computation.\n",
      "I0706 08:10:05.755997  6022 net.cpp:165] accuracy does not need backward computation.\n",
      "I0706 08:10:05.756006  6022 net.cpp:163] ip2_ip2_0_split needs backward computation.\n",
      "I0706 08:10:05.756014  6022 net.cpp:163] ip2 needs backward computation.\n",
      "I0706 08:10:05.756022  6022 net.cpp:163] ip1 needs backward computation.\n",
      "I0706 08:10:05.756031  6022 net.cpp:163] pool3 needs backward computation.\n",
      "I0706 08:10:05.756039  6022 net.cpp:163] relu3 needs backward computation.\n",
      "I0706 08:10:05.756047  6022 net.cpp:163] conv3 needs backward computation.\n",
      "I0706 08:10:05.756057  6022 net.cpp:163] pool2 needs backward computation.\n",
      "I0706 08:10:05.756065  6022 net.cpp:163] relu2 needs backward computation.\n",
      "I0706 08:10:05.756073  6022 net.cpp:163] conv2 needs backward computation.\n",
      "I0706 08:10:05.756081  6022 net.cpp:163] relu1 needs backward computation.\n",
      "I0706 08:10:05.756089  6022 net.cpp:163] pool1 needs backward computation.\n",
      "I0706 08:10:05.756098  6022 net.cpp:163] conv1 needs backward computation.\n",
      "I0706 08:10:05.756105  6022 net.cpp:165] label_cifar_1_split does not need backward computation.\n",
      "I0706 08:10:05.756114  6022 net.cpp:165] cifar does not need backward computation.\n",
      "I0706 08:10:05.756121  6022 net.cpp:201] This network produces output accuracy\n",
      "I0706 08:10:05.756130  6022 net.cpp:201] This network produces output loss\n",
      "I0706 08:10:05.756146  6022 net.cpp:446] Collecting Learning Rate and Weight Decay.\n",
      "I0706 08:10:05.756156  6022 net.cpp:213] Network initialization done.\n",
      "I0706 08:10:05.756165  6022 net.cpp:214] Memory required for data: 31987608\n",
      "I0706 08:10:05.756213  6022 solver.cpp:42] Solver scaffolding done.\n",
      "I0706 08:10:05.756242  6022 solver.cpp:222] Solving CIFAR10_quick\n",
      "I0706 08:10:05.756252  6022 solver.cpp:223] Learning Rate Policy: fixed\n",
      "I0706 08:10:05.756265  6022 solver.cpp:266] Iteration 0, Testing net (#0)\n",
      "I0706 08:10:06.441524  6022 solver.cpp:315]     Test net output #0: accuracy = 0.1044\n",
      "I0706 08:10:06.441594  6022 solver.cpp:315]     Test net output #1: loss = 2.30257 (* 1 = 2.30257 loss)\n",
      "I0706 08:10:06.450326  6022 solver.cpp:189] Iteration 0, loss = 2.30204\n",
      "I0706 08:10:06.450366  6022 solver.cpp:204]     Train net output #0: loss = 2.30204 (* 1 = 2.30204 loss)\n",
      "I0706 08:10:06.450388  6022 solver.cpp:470] Iteration 0, lr = 0.001\n",
      "I0706 08:10:08.332319  6022 solver.cpp:189] Iteration 100, loss = 1.7364\n",
      "I0706 08:10:08.332401  6022 solver.cpp:204]     Train net output #0: loss = 1.7364 (* 1 = 1.7364 loss)\n",
      "I0706 08:10:08.332415  6022 solver.cpp:470] Iteration 100, lr = 0.001\n",
      "I0706 08:10:10.214699  6022 solver.cpp:189] Iteration 200, loss = 1.51435\n",
      "I0706 08:10:10.214761  6022 solver.cpp:204]     Train net output #0: loss = 1.51435 (* 1 = 1.51435 loss)\n",
      "I0706 08:10:10.214776  6022 solver.cpp:470] Iteration 200, lr = 0.001\n",
      "I0706 08:10:12.095708  6022 solver.cpp:189] Iteration 300, loss = 1.24687\n",
      "I0706 08:10:12.095767  6022 solver.cpp:204]     Train net output #0: loss = 1.24687 (* 1 = 1.24687 loss)\n",
      "I0706 08:10:12.095782  6022 solver.cpp:470] Iteration 300, lr = 0.001\n",
      "I0706 08:10:13.979216  6022 solver.cpp:189] Iteration 400, loss = 1.21386\n",
      "I0706 08:10:13.979280  6022 solver.cpp:204]     Train net output #0: loss = 1.21386 (* 1 = 1.21386 loss)\n",
      "I0706 08:10:13.979295  6022 solver.cpp:470] Iteration 400, lr = 0.001\n",
      "I0706 08:10:15.841527  6022 solver.cpp:266] Iteration 500, Testing net (#0)\n",
      "I0706 08:10:16.536044  6022 solver.cpp:315]     Test net output #0: accuracy = 0.5492\n",
      "I0706 08:10:16.536105  6022 solver.cpp:315]     Test net output #1: loss = 1.30196 (* 1 = 1.30196 loss)\n",
      "I0706 08:10:16.543285  6022 solver.cpp:189] Iteration 500, loss = 1.23139\n",
      "I0706 08:10:16.543321  6022 solver.cpp:204]     Train net output #0: loss = 1.23139 (* 1 = 1.23139 loss)\n",
      "I0706 08:10:16.543336  6022 solver.cpp:470] Iteration 500, lr = 0.001\n",
      "I0706 08:10:18.425897  6022 solver.cpp:189] Iteration 600, loss = 1.18446\n",
      "I0706 08:10:18.425959  6022 solver.cpp:204]     Train net output #0: loss = 1.18446 (* 1 = 1.18446 loss)\n",
      "I0706 08:10:18.425973  6022 solver.cpp:470] Iteration 600, lr = 0.001\n",
      "I0706 08:10:20.308996  6022 solver.cpp:189] Iteration 700, loss = 1.15521\n",
      "I0706 08:10:20.309058  6022 solver.cpp:204]     Train net output #0: loss = 1.15521 (* 1 = 1.15521 loss)\n",
      "I0706 08:10:20.309072  6022 solver.cpp:470] Iteration 700, lr = 0.001\n",
      "I0706 08:10:22.191668  6022 solver.cpp:189] Iteration 800, loss = 0.894631\n",
      "I0706 08:10:22.191727  6022 solver.cpp:204]     Train net output #0: loss = 0.894631 (* 1 = 0.894631 loss)\n",
      "I0706 08:10:22.191741  6022 solver.cpp:470] Iteration 800, lr = 0.001\n",
      "I0706 08:10:24.076766  6022 solver.cpp:189] Iteration 900, loss = 0.964295\n",
      "I0706 08:10:24.076830  6022 solver.cpp:204]     Train net output #0: loss = 0.964295 (* 1 = 0.964295 loss)\n",
      "I0706 08:10:24.076844  6022 solver.cpp:470] Iteration 900, lr = 0.001\n",
      "I0706 08:10:25.942203  6022 solver.cpp:266] Iteration 1000, Testing net (#0)\n",
      "I0706 08:10:26.637276  6022 solver.cpp:315]     Test net output #0: accuracy = 0.6237\n",
      "I0706 08:10:26.637341  6022 solver.cpp:315]     Test net output #1: loss = 1.07941 (* 1 = 1.07941 loss)\n",
      "I0706 08:10:26.644522  6022 solver.cpp:189] Iteration 1000, loss = 0.993007\n",
      "I0706 08:10:26.644559  6022 solver.cpp:204]     Train net output #0: loss = 0.993007 (* 1 = 0.993007 loss)\n",
      "I0706 08:10:26.644573  6022 solver.cpp:470] Iteration 1000, lr = 0.001\n",
      "I0706 08:10:28.527544  6022 solver.cpp:189] Iteration 1100, loss = 0.970208\n",
      "I0706 08:10:28.527611  6022 solver.cpp:204]     Train net output #0: loss = 0.970208 (* 1 = 0.970208 loss)\n",
      "I0706 08:10:28.527626  6022 solver.cpp:470] Iteration 1100, lr = 0.001\n",
      "I0706 08:10:30.412408  6022 solver.cpp:189] Iteration 1200, loss = 0.939813\n",
      "I0706 08:10:30.412472  6022 solver.cpp:204]     Train net output #0: loss = 0.939813 (* 1 = 0.939813 loss)\n",
      "I0706 08:10:30.412485  6022 solver.cpp:470] Iteration 1200, lr = 0.001\n",
      "I0706 08:10:32.295737  6022 solver.cpp:189] Iteration 1300, loss = 0.810856\n",
      "I0706 08:10:32.295800  6022 solver.cpp:204]     Train net output #0: loss = 0.810856 (* 1 = 0.810856 loss)\n",
      "I0706 08:10:32.295814  6022 solver.cpp:470] Iteration 1300, lr = 0.001\n",
      "I0706 08:10:34.177734  6022 solver.cpp:189] Iteration 1400, loss = 0.777243\n",
      "I0706 08:10:34.177796  6022 solver.cpp:204]     Train net output #0: loss = 0.777243 (* 1 = 0.777243 loss)\n",
      "I0706 08:10:34.177810  6022 solver.cpp:470] Iteration 1400, lr = 0.001\n",
      "I0706 08:10:36.041863  6022 solver.cpp:266] Iteration 1500, Testing net (#0)\n",
      "I0706 08:10:36.736788  6022 solver.cpp:315]     Test net output #0: accuracy = 0.6576\n",
      "I0706 08:10:36.736848  6022 solver.cpp:315]     Test net output #1: loss = 0.989839 (* 1 = 0.989839 loss)\n",
      "I0706 08:10:36.743975  6022 solver.cpp:189] Iteration 1500, loss = 0.8642\n",
      "I0706 08:10:36.744012  6022 solver.cpp:204]     Train net output #0: loss = 0.8642 (* 1 = 0.8642 loss)\n",
      "I0706 08:10:36.744027  6022 solver.cpp:470] Iteration 1500, lr = 0.001\n",
      "I0706 08:10:38.626438  6022 solver.cpp:189] Iteration 1600, loss = 0.930111\n",
      "I0706 08:10:38.626503  6022 solver.cpp:204]     Train net output #0: loss = 0.930111 (* 1 = 0.930111 loss)\n",
      "I0706 08:10:38.626521  6022 solver.cpp:470] Iteration 1600, lr = 0.001\n",
      "I0706 08:10:40.508667  6022 solver.cpp:189] Iteration 1700, loss = 0.837138\n",
      "I0706 08:10:40.508741  6022 solver.cpp:204]     Train net output #0: loss = 0.837138 (* 1 = 0.837138 loss)\n",
      "I0706 08:10:40.508755  6022 solver.cpp:470] Iteration 1700, lr = 0.001\n",
      "I0706 08:10:42.391710  6022 solver.cpp:189] Iteration 1800, loss = 0.724699\n",
      "I0706 08:10:42.391772  6022 solver.cpp:204]     Train net output #0: loss = 0.724699 (* 1 = 0.724699 loss)\n",
      "I0706 08:10:42.391785  6022 solver.cpp:470] Iteration 1800, lr = 0.001\n",
      "I0706 08:10:44.273614  6022 solver.cpp:189] Iteration 1900, loss = 0.703722\n",
      "I0706 08:10:44.273676  6022 solver.cpp:204]     Train net output #0: loss = 0.703722 (* 1 = 0.703722 loss)\n",
      "I0706 08:10:44.273690  6022 solver.cpp:470] Iteration 1900, lr = 0.001\n",
      "I0706 08:10:46.137451  6022 solver.cpp:266] Iteration 2000, Testing net (#0)\n",
      "I0706 08:10:46.833978  6022 solver.cpp:315]     Test net output #0: accuracy = 0.6795\n",
      "I0706 08:10:46.834039  6022 solver.cpp:315]     Test net output #1: loss = 0.932584 (* 1 = 0.932584 loss)\n",
      "I0706 08:10:46.841260  6022 solver.cpp:189] Iteration 2000, loss = 0.781193\n",
      "I0706 08:10:46.841298  6022 solver.cpp:204]     Train net output #0: loss = 0.781193 (* 1 = 0.781193 loss)\n",
      "I0706 08:10:46.841312  6022 solver.cpp:470] Iteration 2000, lr = 0.001\n",
      "I0706 08:10:48.723139  6022 solver.cpp:189] Iteration 2100, loss = 0.889919\n",
      "I0706 08:10:48.723206  6022 solver.cpp:204]     Train net output #0: loss = 0.889919 (* 1 = 0.889919 loss)\n",
      "I0706 08:10:48.723219  6022 solver.cpp:470] Iteration 2100, lr = 0.001\n",
      "I0706 08:10:50.607379  6022 solver.cpp:189] Iteration 2200, loss = 0.806528\n",
      "I0706 08:10:50.607445  6022 solver.cpp:204]     Train net output #0: loss = 0.806528 (* 1 = 0.806528 loss)\n",
      "I0706 08:10:50.607458  6022 solver.cpp:470] Iteration 2200, lr = 0.001\n",
      "I0706 08:10:52.489199  6022 solver.cpp:189] Iteration 2300, loss = 0.612277\n",
      "I0706 08:10:52.489266  6022 solver.cpp:204]     Train net output #0: loss = 0.612277 (* 1 = 0.612277 loss)\n",
      "I0706 08:10:52.489280  6022 solver.cpp:470] Iteration 2300, lr = 0.001\n",
      "I0706 08:10:54.371546  6022 solver.cpp:189] Iteration 2400, loss = 0.662837\n",
      "I0706 08:10:54.371613  6022 solver.cpp:204]     Train net output #0: loss = 0.662837 (* 1 = 0.662837 loss)\n",
      "I0706 08:10:54.371626  6022 solver.cpp:470] Iteration 2400, lr = 0.001\n",
      "I0706 08:10:56.236964  6022 solver.cpp:266] Iteration 2500, Testing net (#0)\n",
      "I0706 08:10:56.934773  6022 solver.cpp:315]     Test net output #0: accuracy = 0.6965\n",
      "I0706 08:10:56.934834  6022 solver.cpp:315]     Test net output #1: loss = 0.885617 (* 1 = 0.885617 loss)\n",
      "I0706 08:10:56.942030  6022 solver.cpp:189] Iteration 2500, loss = 0.645034\n",
      "I0706 08:10:56.942067  6022 solver.cpp:204]     Train net output #0: loss = 0.645034 (* 1 = 0.645034 loss)\n",
      "I0706 08:10:56.942085  6022 solver.cpp:470] Iteration 2500, lr = 0.001\n",
      "I0706 08:10:58.825016  6022 solver.cpp:189] Iteration 2600, loss = 0.877967\n",
      "I0706 08:10:58.825089  6022 solver.cpp:204]     Train net output #0: loss = 0.877967 (* 1 = 0.877967 loss)\n",
      "I0706 08:10:58.825103  6022 solver.cpp:470] Iteration 2600, lr = 0.001\n",
      "I0706 08:11:00.709141  6022 solver.cpp:189] Iteration 2700, loss = 0.737745\n",
      "I0706 08:11:00.709208  6022 solver.cpp:204]     Train net output #0: loss = 0.737745 (* 1 = 0.737745 loss)\n",
      "I0706 08:11:00.709223  6022 solver.cpp:470] Iteration 2700, lr = 0.001\n",
      "I0706 08:11:02.592629  6022 solver.cpp:189] Iteration 2800, loss = 0.59629\n",
      "I0706 08:11:02.594008  6022 solver.cpp:204]     Train net output #0: loss = 0.59629 (* 1 = 0.59629 loss)\n",
      "I0706 08:11:02.594023  6022 solver.cpp:470] Iteration 2800, lr = 0.001\n",
      "I0706 08:11:04.475997  6022 solver.cpp:189] Iteration 2900, loss = 0.671401\n",
      "I0706 08:11:04.476084  6022 solver.cpp:204]     Train net output #0: loss = 0.671401 (* 1 = 0.671401 loss)\n",
      "I0706 08:11:04.476099  6022 solver.cpp:470] Iteration 2900, lr = 0.001\n",
      "I0706 08:11:06.340404  6022 solver.cpp:266] Iteration 3000, Testing net (#0)\n",
      "I0706 08:11:07.036053  6022 solver.cpp:315]     Test net output #0: accuracy = 0.7082\n",
      "I0706 08:11:07.036113  6022 solver.cpp:315]     Test net output #1: loss = 0.848987 (* 1 = 0.848987 loss)\n",
      "I0706 08:11:07.043268  6022 solver.cpp:189] Iteration 3000, loss = 0.611353\n",
      "I0706 08:11:07.043305  6022 solver.cpp:204]     Train net output #0: loss = 0.611353 (* 1 = 0.611353 loss)\n",
      "I0706 08:11:07.043320  6022 solver.cpp:470] Iteration 3000, lr = 0.001\n",
      "I0706 08:11:08.926187  6022 solver.cpp:189] Iteration 3100, loss = 0.782428\n",
      "I0706 08:11:08.926249  6022 solver.cpp:204]     Train net output #0: loss = 0.782428 (* 1 = 0.782428 loss)\n",
      "I0706 08:11:08.926264  6022 solver.cpp:470] Iteration 3100, lr = 0.001\n",
      "I0706 08:11:10.808272  6022 solver.cpp:189] Iteration 3200, loss = 0.707928\n",
      "I0706 08:11:10.808351  6022 solver.cpp:204]     Train net output #0: loss = 0.707928 (* 1 = 0.707928 loss)\n",
      "I0706 08:11:10.808369  6022 solver.cpp:470] Iteration 3200, lr = 0.001\n",
      "I0706 08:11:12.690855  6022 solver.cpp:189] Iteration 3300, loss = 0.579208\n",
      "I0706 08:11:12.690918  6022 solver.cpp:204]     Train net output #0: loss = 0.579208 (* 1 = 0.579208 loss)\n",
      "I0706 08:11:12.690932  6022 solver.cpp:470] Iteration 3300, lr = 0.001\n",
      "I0706 08:11:14.573460  6022 solver.cpp:189] Iteration 3400, loss = 0.643339\n",
      "I0706 08:11:14.573523  6022 solver.cpp:204]     Train net output #0: loss = 0.643339 (* 1 = 0.643339 loss)\n",
      "I0706 08:11:14.573537  6022 solver.cpp:470] Iteration 3400, lr = 0.001\n",
      "I0706 08:11:16.435932  6022 solver.cpp:266] Iteration 3500, Testing net (#0)\n",
      "I0706 08:11:17.132416  6022 solver.cpp:315]     Test net output #0: accuracy = 0.7159\n",
      "I0706 08:11:17.132475  6022 solver.cpp:315]     Test net output #1: loss = 0.838302 (* 1 = 0.838302 loss)\n",
      "I0706 08:11:17.139679  6022 solver.cpp:189] Iteration 3500, loss = 0.580835\n",
      "I0706 08:11:17.139715  6022 solver.cpp:204]     Train net output #0: loss = 0.580835 (* 1 = 0.580835 loss)\n",
      "I0706 08:11:17.139730  6022 solver.cpp:470] Iteration 3500, lr = 0.001\n",
      "I0706 08:11:19.021704  6022 solver.cpp:189] Iteration 3600, loss = 0.715001\n",
      "I0706 08:11:19.021767  6022 solver.cpp:204]     Train net output #0: loss = 0.715001 (* 1 = 0.715001 loss)\n",
      "I0706 08:11:19.021781  6022 solver.cpp:470] Iteration 3600, lr = 0.001\n",
      "I0706 08:11:20.904986  6022 solver.cpp:189] Iteration 3700, loss = 0.693631\n",
      "I0706 08:11:20.905053  6022 solver.cpp:204]     Train net output #0: loss = 0.693631 (* 1 = 0.693631 loss)\n",
      "I0706 08:11:20.905067  6022 solver.cpp:470] Iteration 3700, lr = 0.001\n",
      "I0706 08:11:22.789093  6022 solver.cpp:189] Iteration 3800, loss = 0.556833\n",
      "I0706 08:11:22.789157  6022 solver.cpp:204]     Train net output #0: loss = 0.556833 (* 1 = 0.556833 loss)\n",
      "I0706 08:11:22.789175  6022 solver.cpp:470] Iteration 3800, lr = 0.001\n",
      "I0706 08:11:24.674048  6022 solver.cpp:189] Iteration 3900, loss = 0.582206\n",
      "I0706 08:11:24.674110  6022 solver.cpp:204]     Train net output #0: loss = 0.582206 (* 1 = 0.582206 loss)\n",
      "I0706 08:11:24.674125  6022 solver.cpp:470] Iteration 3900, lr = 0.001\n",
      "I0706 08:11:26.550212  6022 solver.cpp:334] Snapshotting to examples/cifar10/cifar10_quick_iter_4000.caffemodel\n",
      "I0706 08:11:26.552618  6022 solver.cpp:342] Snapshotting solver state to examples/cifar10/cifar10_quick_iter_4000.solverstate\n",
      "I0706 08:11:26.560802  6022 solver.cpp:248] Iteration 4000, loss = 0.563636\n",
      "I0706 08:11:26.560839  6022 solver.cpp:266] Iteration 4000, Testing net (#0)\n",
      "I0706 08:11:27.244922  6022 solver.cpp:315]     Test net output #0: accuracy = 0.7149\n",
      "I0706 08:11:27.244982  6022 solver.cpp:315]     Test net output #1: loss = 0.835115 (* 1 = 0.835115 loss)\n",
      "I0706 08:11:27.244997  6022 solver.cpp:253] Optimization Done.\n",
      "I0706 08:11:27.245007  6022 caffe.cpp:121] Optimization Done.\n"
     ]
    }
   ],
   "source": [
    "!cd /home/ubuntu/caffe && ./build/tools/caffe train --solver=examples/cifar10/cifar10_quick_solver.prototxt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Congratulations - you just trained your first DNN!  After 4000 iterations you will see the accuracy against the test set was ~71% - not bad for a couple of minutes training!  Each iteration took less than 0.02 seconds to train using the GPU.\n",
    "\n",
    "The learned network weights get saved into a binary file called cifar10_quick_iter_4000.caffemodel\n",
    "\n",
    "Classifying new images using the newly trained dataset is just as simple as training was - this time we will use Caffe's Python interface.  Activate the cell below as many times as you like to randomly choose an image from the test set and have it classified - there is no need to edit any of the code. Remember - the test set is images that were never used in training the network."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nBvx7vMcvNP4Pl7HMgYrfRm0AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f826979c150>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "truck\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n/wOZXRA4gwmtJQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f8235b1a5d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Import required Python libraries\n",
    "%matplotlib inline\n",
    "import os\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import caffe\n",
    "import random\n",
    "\n",
    "# Choose network definition file and pretrained network binary\n",
    "MODEL_FILE = '/home/ubuntu/caffe/examples/cifar10/cifar10_quick.prototxt'\n",
    "PRETRAINED = '/home/ubuntu/caffe/examples/cifar10/cifar10_quick_iter_4000.caffemodel'\n",
    "\n",
    "# Load a random image\n",
    "x = caffe.io.load_image('/home/ubuntu/caffe/examples/images/' + str(random.randint(1,18)) + '.png')\n",
    "\n",
    "# Display the chosen image\n",
    "plt.imshow(x)\n",
    "plt.axis('off')\n",
    "plt.show()\n",
    "\n",
    "# Load the pretrained model and select to use the GPU for computation\n",
    "caffe.set_mode_gpu()\n",
    "net = caffe.Classifier(MODEL_FILE, PRETRAINED,\n",
    "                       mean=np.load('/home/ubuntu/caffe/caffe/examples/cifar10/cifar10_mean.npy').mean(1).mean(1),\n",
    "                       raw_scale=255,\n",
    "                       image_dims=(32, 32))\n",
    "\n",
    "# Run the image through the pretrained network\n",
    "prediction = net.predict([x])\n",
    "\n",
    "# List of class labels\n",
    "classes = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']\n",
    "\n",
    "# Display the predicted probability for each class\n",
    "plt.plot(prediction[0])\n",
    "plt.xticks(range(0,10), classes, rotation=45)\n",
    "# Display the most probable class\n",
    "print classes[prediction[0].argmax()]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Even for this relatively small dataset and network architecture GPU acceleration is still highly desirable.  Running the cell below will train the same network for 100 iterations using the CPU - as you will see, it is considerably slower than training on the GPU was above. Training for 0.025 times as many iterations takes about 50% more time!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "libdc1394 error: Failed to initialize libdc1394\n",
      "I0706 08:16:26.558791 11565 caffe.cpp:103] Use CPU.\n",
      "I0706 08:16:26.675791 11565 caffe.cpp:107] Starting Optimization\n",
      "I0706 08:16:26.675946 11565 solver.cpp:32] Initializing solver from parameters: \n",
      "test_iter: 100\n",
      "test_interval: 100\n",
      "base_lr: 0.001\n",
      "display: 100\n",
      "max_iter: 100\n",
      "lr_policy: \"fixed\"\n",
      "momentum: 0.9\n",
      "weight_decay: 0.004\n",
      "snapshot: 100\n",
      "snapshot_prefix: \"examples/cifar10/cifar10_quick_cpu\"\n",
      "solver_mode: CPU\n",
      "net: \"examples/cifar10/cifar10_quick_train_test.prototxt\"\n",
      "I0706 08:16:26.676030 11565 solver.cpp:70] Creating training net from net file: examples/cifar10/cifar10_quick_train_test.prototxt\n",
      "I0706 08:16:26.676576 11565 net.cpp:253] The NetState phase (0) differed from the phase (1) specified by a rule in layer cifar\n",
      "I0706 08:16:26.676621 11565 net.cpp:253] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy\n",
      "I0706 08:16:26.676756 11565 net.cpp:42] Initializing net from parameters: \n",
      "name: \"CIFAR10_quick\"\n",
      "state {\n",
      "  phase: TRAIN\n",
      "}\n",
      "layer {\n",
      "  name: \"cifar\"\n",
      "  type: \"Data\"\n",
      "  top: \"data\"\n",
      "  top: \"label\"\n",
      "  include {\n",
      "    phase: TRAIN\n",
      "  }\n",
      "  transform_param {\n",
      "    mean_file: \"examples/cifar10/mean.binaryproto\"\n",
      "  }\n",
      "  data_param {\n",
      "    source: \"examples/cifar10/cifar10_train_lmdb\"\n",
      "    batch_size: 100\n",
      "    backend: LMDB\n",
      "  }\n",
      "}\n",
      "layer {\n",
      "  name: \"conv1\"\n",
      "  type: \"Convolution\"\n",
      "  bottom: \"data\"\n",
      "  top: \"conv1\"\n",
      "  param {\n",
      "    lr_mult: 1\n",
      "  }\n",
      "  param {\n",
      "    lr_mult: 2\n",
      "  }\n",
      "  convolution_param {\n",
      "    num_output: 32\n",
      "    pad: 2\n",
      "    kernel_size: 5\n",
      "    stride: 1\n",
      "    weight_filler {\n",
      "      type: \"gaussian\"\n",
      "      std: 0.0001\n",
      "    }\n",
      "    bias_filler {\n",
      "      type: \"constant\"\n",
      "    }\n",
      "  }\n",
      "}\n",
      "layer {\n",
      "  name: \"pool1\"\n",
      "  type: \"Pooling\"\n",
      "  bottom: \"conv1\"\n",
      "  top: \"pool1\"\n",
      "  pooling_param {\n",
      "    pool: MAX\n",
      "    kernel_size: 3\n",
      "    stride: 2\n",
      "  }\n",
      "}\n",
      "layer {\n",
      "  name: \"relu1\"\n",
      "  type: \"ReLU\"\n",
      "  bottom: \"pool1\"\n",
      "  top: \"pool1\"\n",
      "}\n",
      "layer {\n",
      "  name: \"conv2\"\n",
      "  type: \"Convolution\"\n",
      "  bottom: \"pool1\"\n",
      "  top: \"conv2\"\n",
      "  param {\n",
      "    lr_mult: 1\n",
      "  }\n",
      "  param {\n",
      "    lr_mult: 2\n",
      "  }\n",
      "  convolution_param {\n",
      "    num_output: 32\n",
      "    pad: 2\n",
      "    kernel_size: 5\n",
      "    stride: 1\n",
      "    weight_filler {\n",
      "      type: \"gaussian\"\n",
      "      std: 0.01\n",
      "    }\n",
      "    bias_filler {\n",
      "      type: \"constant\"\n",
      "    }\n",
      "  }\n",
      "}\n",
      "layer {\n",
      "  name: \"relu2\"\n",
      "  type: \"ReLU\"\n",
      "  bottom: \"conv2\"\n",
      "  top: \"conv2\"\n",
      "}\n",
      "layer {\n",
      "  name: \"pool2\"\n",
      "  type: \"Pooling\"\n",
      "  bottom: \"conv2\"\n",
      "  top: \"pool2\"\n",
      "  pooling_param {\n",
      "    pool: AVE\n",
      "    kernel_size: 3\n",
      "    stride: 2\n",
      "  }\n",
      "}\n",
      "layer {\n",
      "  name: \"conv3\"\n",
      "  type: \"Convolution\"\n",
      "  bottom: \"pool2\"\n",
      "  top: \"conv3\"\n",
      "  param {\n",
      "    lr_mult: 1\n",
      "  }\n",
      "  param {\n",
      "    lr_mult: 2\n",
      "  }\n",
      "  convolution_param {\n",
      "    num_output: 64\n",
      "    pad: 2\n",
      "    kernel_size: 5\n",
      "    stride: 1\n",
      "    weight_filler {\n",
      "      type: \"gaussian\"\n",
      "      std: 0.01\n",
      "    }\n",
      "    bias_filler {\n",
      "      type: \"constant\"\n",
      "    }\n",
      "  }\n",
      "}\n",
      "layer {\n",
      "  name: \"relu3\"\n",
      "  type: \"ReLU\"\n",
      "  bottom: \"conv3\"\n",
      "  top: \"conv3\"\n",
      "}\n",
      "layer {\n",
      "  name: \"pool3\"\n",
      "  type: \"Pooling\"\n",
      "  bottom: \"conv3\"\n",
      "  top: \"pool3\"\n",
      "  pooling_param {\n",
      "    pool: AVE\n",
      "    kernel_size: 3\n",
      "    stride: 2\n",
      "  }\n",
      "}\n",
      "layer {\n",
      "  name: \"ip1\"\n",
      "  type: \"InnerProduct\"\n",
      "  bottom: \"pool3\"\n",
      "  top: \"ip1\"\n",
      "  param {\n",
      "    lr_mult: 1\n",
      "  }\n",
      "  param {\n",
      "    lr_mult: 2\n",
      "  }\n",
      "  inner_product_param {\n",
      "    num_output: 64\n",
      "    weight_filler {\n",
      "      type: \"gaussian\"\n",
      "      std: 0.1\n",
      "    }\n",
      "    bias_filler {\n",
      "      type: \"constant\"\n",
      "    }\n",
      "  }\n",
      "}\n",
      "layer {\n",
      "  name: \"ip2\"\n",
      "  type: \"InnerProduct\"\n",
      "  bottom: \"ip1\"\n",
      "  top: \"ip2\"\n",
      "  param {\n",
      "    lr_mult: 1\n",
      "  }\n",
      "  param {\n",
      "    lr_mult: 2\n",
      "  }\n",
      "  inner_product_param {\n",
      "    num_output: 10\n",
      "    weight_filler {\n",
      "      type: \"gaussian\"\n",
      "      std: 0.1\n",
      "    }\n",
      "    bias_filler {\n",
      "      type: \"constant\"\n",
      "    }\n",
      "  }\n",
      "}\n",
      "layer {\n",
      "  name: \"loss\"\n",
      "  type: \"SoftmaxWithLoss\"\n",
      "  bottom: \"ip2\"\n",
      "  bottom: \"label\"\n",
      "  top: \"loss\"\n",
      "}\n",
      "I0706 08:16:26.677512 11565 layer_factory.hpp:74] Creating layer cifar\n",
      "I0706 08:16:26.677544 11565 net.cpp:76] Creating Layer cifar\n",
      "I0706 08:16:26.677561 11565 net.cpp:334] cifar -> data\n",
      "I0706 08:16:26.677599 11565 net.cpp:334] cifar -> label\n",
      "I0706 08:16:26.677618 11565 net.cpp:105] Setting up cifar\n",
      "I0706 08:16:26.677737 11565 db.cpp:34] Opened lmdb examples/cifar10/cifar10_train_lmdb\n",
      "I0706 08:16:26.677796 11565 data_layer.cpp:67] output data size: 100,3,32,32\n",
      "I0706 08:16:26.677815 11565 data_transformer.cpp:22] Loading mean file from: examples/cifar10/mean.binaryproto\n",
      "I0706 08:16:26.678498 11565 net.cpp:112] Top shape: 100 3 32 32 (307200)\n",
      "I0706 08:16:26.678526 11565 net.cpp:112] Top shape: 100 1 1 1 (100)\n",
      "I0706 08:16:26.678547 11565 layer_factory.hpp:74] Creating layer conv1\n",
      "I0706 08:16:26.678575 11565 net.cpp:76] Creating Layer conv1\n",
      "I0706 08:16:26.678588 11565 net.cpp:372] conv1 <- data\n",
      "I0706 08:16:26.678607 11565 net.cpp:334] conv1 -> conv1\n",
      "I0706 08:16:26.678624 11565 net.cpp:105] Setting up conv1\n",
      "I0706 08:16:26.731941 11565 net.cpp:112] Top shape: 100 32 32 32 (3276800)\n",
      "I0706 08:16:26.732033 11565 layer_factory.hpp:74] Creating layer pool1\n",
      "I0706 08:16:26.732074 11565 net.cpp:76] Creating Layer pool1\n",
      "I0706 08:16:26.732092 11565 net.cpp:372] pool1 <- conv1\n",
      "I0706 08:16:26.732107 11565 net.cpp:334] pool1 -> pool1\n",
      "I0706 08:16:26.732122 11565 net.cpp:105] Setting up pool1\n",
      "I0706 08:16:26.732290 11565 net.cpp:112] Top shape: 100 32 16 16 (819200)\n",
      "I0706 08:16:26.732313 11565 layer_factory.hpp:74] Creating layer relu1\n",
      "I0706 08:16:26.732333 11565 net.cpp:76] Creating Layer relu1\n",
      "I0706 08:16:26.732372 11565 net.cpp:372] relu1 <- pool1\n",
      "I0706 08:16:26.732389 11565 net.cpp:323] relu1 -> pool1 (in-place)\n",
      "I0706 08:16:26.732401 11565 net.cpp:105] Setting up relu1\n",
      "I0706 08:16:26.732457 11565 net.cpp:112] Top shape: 100 32 16 16 (819200)\n",
      "I0706 08:16:26.732470 11565 layer_factory.hpp:74] Creating layer conv2\n",
      "I0706 08:16:26.732487 11565 net.cpp:76] Creating Layer conv2\n",
      "I0706 08:16:26.732496 11565 net.cpp:372] conv2 <- pool1\n",
      "I0706 08:16:26.732511 11565 net.cpp:334] conv2 -> conv2\n",
      "I0706 08:16:26.732525 11565 net.cpp:105] Setting up conv2\n",
      "I0706 08:16:26.733904 11565 net.cpp:112] Top shape: 100 32 16 16 (819200)\n",
      "I0706 08:16:26.733945 11565 layer_factory.hpp:74] Creating layer relu2\n",
      "I0706 08:16:26.733968 11565 net.cpp:76] Creating Layer relu2\n",
      "I0706 08:16:26.733984 11565 net.cpp:372] relu2 <- conv2\n",
      "I0706 08:16:26.733995 11565 net.cpp:323] relu2 -> conv2 (in-place)\n",
      "I0706 08:16:26.734006 11565 net.cpp:105] Setting up relu2\n",
      "I0706 08:16:26.734055 11565 net.cpp:112] Top shape: 100 32 16 16 (819200)\n",
      "I0706 08:16:26.734067 11565 layer_factory.hpp:74] Creating layer pool2\n",
      "I0706 08:16:26.734081 11565 net.cpp:76] Creating Layer pool2\n",
      "I0706 08:16:26.734091 11565 net.cpp:372] pool2 <- conv2\n",
      "I0706 08:16:26.734102 11565 net.cpp:334] pool2 -> pool2\n",
      "I0706 08:16:26.734112 11565 net.cpp:105] Setting up pool2\n",
      "I0706 08:16:26.734267 11565 net.cpp:112] Top shape: 100 32 8 8 (204800)\n",
      "I0706 08:16:26.734287 11565 layer_factory.hpp:74] Creating layer conv3\n",
      "I0706 08:16:26.734300 11565 net.cpp:76] Creating Layer conv3\n",
      "I0706 08:16:26.734309 11565 net.cpp:372] conv3 <- pool2\n",
      "I0706 08:16:26.734321 11565 net.cpp:334] conv3 -> conv3\n",
      "I0706 08:16:26.734334 11565 net.cpp:105] Setting up conv3\n",
      "I0706 08:16:26.736219 11565 net.cpp:112] Top shape: 100 64 8 8 (409600)\n",
      "I0706 08:16:26.736260 11565 layer_factory.hpp:74] Creating layer relu3\n",
      "I0706 08:16:26.736284 11565 net.cpp:76] Creating Layer relu3\n",
      "I0706 08:16:26.736299 11565 net.cpp:372] relu3 <- conv3\n",
      "I0706 08:16:26.736310 11565 net.cpp:323] relu3 -> conv3 (in-place)\n",
      "I0706 08:16:26.736322 11565 net.cpp:105] Setting up relu3\n",
      "I0706 08:16:26.736402 11565 net.cpp:112] Top shape: 100 64 8 8 (409600)\n",
      "I0706 08:16:26.736415 11565 layer_factory.hpp:74] Creating layer pool3\n",
      "I0706 08:16:26.736428 11565 net.cpp:76] Creating Layer pool3\n",
      "I0706 08:16:26.736436 11565 net.cpp:372] pool3 <- conv3\n",
      "I0706 08:16:26.736446 11565 net.cpp:334] pool3 -> pool3\n",
      "I0706 08:16:26.736457 11565 net.cpp:105] Setting up pool3\n",
      "I0706 08:16:26.736526 11565 net.cpp:112] Top shape: 100 64 4 4 (102400)\n",
      "I0706 08:16:26.736548 11565 layer_factory.hpp:74] Creating layer ip1\n",
      "I0706 08:16:26.736572 11565 net.cpp:76] Creating Layer ip1\n",
      "I0706 08:16:26.736582 11565 net.cpp:372] ip1 <- pool3\n",
      "I0706 08:16:26.736593 11565 net.cpp:334] ip1 -> ip1\n",
      "I0706 08:16:26.736610 11565 net.cpp:105] Setting up ip1\n",
      "I0706 08:16:26.738828 11565 net.cpp:112] Top shape: 100 64 1 1 (6400)\n",
      "I0706 08:16:26.738864 11565 layer_factory.hpp:74] Creating layer ip2\n",
      "I0706 08:16:26.738889 11565 net.cpp:76] Creating Layer ip2\n",
      "I0706 08:16:26.738931 11565 net.cpp:372] ip2 <- ip1\n",
      "I0706 08:16:26.738945 11565 net.cpp:334] ip2 -> ip2\n",
      "I0706 08:16:26.738957 11565 net.cpp:105] Setting up ip2\n",
      "I0706 08:16:26.738991 11565 net.cpp:112] Top shape: 100 10 1 1 (1000)\n",
      "I0706 08:16:26.739006 11565 layer_factory.hpp:74] Creating layer loss\n",
      "I0706 08:16:26.739022 11565 net.cpp:76] Creating Layer loss\n",
      "I0706 08:16:26.739030 11565 net.cpp:372] loss <- ip2\n",
      "I0706 08:16:26.739040 11565 net.cpp:372] loss <- label\n",
      "I0706 08:16:26.739053 11565 net.cpp:334] loss -> loss\n",
      "I0706 08:16:26.739070 11565 net.cpp:105] Setting up loss\n",
      "I0706 08:16:26.739089 11565 layer_factory.hpp:74] Creating layer loss\n",
      "I0706 08:16:26.739189 11565 net.cpp:112] Top shape: 1 1 1 1 (1)\n",
      "I0706 08:16:26.739205 11565 net.cpp:118]     with loss weight 1\n",
      "I0706 08:16:26.739234 11565 net.cpp:163] loss needs backward computation.\n",
      "I0706 08:16:26.739244 11565 net.cpp:163] ip2 needs backward computation.\n",
      "I0706 08:16:26.739253 11565 net.cpp:163] ip1 needs backward computation.\n",
      "I0706 08:16:26.739260 11565 net.cpp:163] pool3 needs backward computation.\n",
      "I0706 08:16:26.739269 11565 net.cpp:163] relu3 needs backward computation.\n",
      "I0706 08:16:26.739276 11565 net.cpp:163] conv3 needs backward computation.\n",
      "I0706 08:16:26.739284 11565 net.cpp:163] pool2 needs backward computation.\n",
      "I0706 08:16:26.739292 11565 net.cpp:163] relu2 needs backward computation.\n",
      "I0706 08:16:26.739300 11565 net.cpp:163] conv2 needs backward computation.\n",
      "I0706 08:16:26.739308 11565 net.cpp:163] relu1 needs backward computation.\n",
      "I0706 08:16:26.739317 11565 net.cpp:163] pool1 needs backward computation.\n",
      "I0706 08:16:26.739325 11565 net.cpp:163] conv1 needs backward computation.\n",
      "I0706 08:16:26.739336 11565 net.cpp:165] cifar does not need backward computation.\n",
      "I0706 08:16:26.739351 11565 net.cpp:201] This network produces output loss\n",
      "I0706 08:16:26.739377 11565 net.cpp:446] Collecting Learning Rate and Weight Decay.\n",
      "I0706 08:16:26.739401 11565 net.cpp:213] Network initialization done.\n",
      "I0706 08:16:26.739415 11565 net.cpp:214] Memory required for data: 31978804\n",
      "I0706 08:16:26.739835 11565 solver.cpp:154] Creating test net (#0) specified by net file: examples/cifar10/cifar10_quick_train_test.prototxt\n",
      "I0706 08:16:26.739890 11565 net.cpp:253] The NetState phase (1) differed from the phase (0) specified by a rule in layer cifar\n",
      "I0706 08:16:26.740032 11565 net.cpp:42] Initializing net from parameters: \n",
      "name: \"CIFAR10_quick\"\n",
      "state {\n",
      "  phase: TEST\n",
      "}\n",
      "layer {\n",
      "  name: \"cifar\"\n",
      "  type: \"Data\"\n",
      "  top: \"data\"\n",
      "  top: \"label\"\n",
      "  include {\n",
      "    phase: TEST\n",
      "  }\n",
      "  transform_param {\n",
      "    mean_file: \"examples/cifar10/mean.binaryproto\"\n",
      "  }\n",
      "  data_param {\n",
      "    source: \"examples/cifar10/cifar10_test_lmdb\"\n",
      "    batch_size: 100\n",
      "    backend: LMDB\n",
      "  }\n",
      "}\n",
      "layer {\n",
      "  name: \"conv1\"\n",
      "  type: \"Convolution\"\n",
      "  bottom: \"data\"\n",
      "  top: \"conv1\"\n",
      "  param {\n",
      "    lr_mult: 1\n",
      "  }\n",
      "  param {\n",
      "    lr_mult: 2\n",
      "  }\n",
      "  convolution_param {\n",
      "    num_output: 32\n",
      "    pad: 2\n",
      "    kernel_size: 5\n",
      "    stride: 1\n",
      "    weight_filler {\n",
      "      type: \"gaussian\"\n",
      "      std: 0.0001\n",
      "    }\n",
      "    bias_filler {\n",
      "      type: \"constant\"\n",
      "    }\n",
      "  }\n",
      "}\n",
      "layer {\n",
      "  name: \"pool1\"\n",
      "  type: \"Pooling\"\n",
      "  bottom: \"conv1\"\n",
      "  top: \"pool1\"\n",
      "  pooling_param {\n",
      "    pool: MAX\n",
      "    kernel_size: 3\n",
      "    stride: 2\n",
      "  }\n",
      "}\n",
      "layer {\n",
      "  name: \"relu1\"\n",
      "  type: \"ReLU\"\n",
      "  bottom: \"pool1\"\n",
      "  top: \"pool1\"\n",
      "}\n",
      "layer {\n",
      "  name: \"conv2\"\n",
      "  type: \"Convolution\"\n",
      "  bottom: \"pool1\"\n",
      "  top: \"conv2\"\n",
      "  param {\n",
      "    lr_mult: 1\n",
      "  }\n",
      "  param {\n",
      "    lr_mult: 2\n",
      "  }\n",
      "  convolution_param {\n",
      "    num_output: 32\n",
      "    pad: 2\n",
      "    kernel_size: 5\n",
      "    stride: 1\n",
      "    weight_filler {\n",
      "      type: \"gaussian\"\n",
      "      std: 0.01\n",
      "    }\n",
      "    bias_filler {\n",
      "      type: \"constant\"\n",
      "    }\n",
      "  }\n",
      "}\n",
      "layer {\n",
      "  name: \"relu2\"\n",
      "  type: \"ReLU\"\n",
      "  bottom: \"conv2\"\n",
      "  top: \"conv2\"\n",
      "}\n",
      "layer {\n",
      "  name: \"pool2\"\n",
      "  type: \"Pooling\"\n",
      "  bottom: \"conv2\"\n",
      "  top: \"pool2\"\n",
      "  pooling_param {\n",
      "    pool: AVE\n",
      "    kernel_size: 3\n",
      "    stride: 2\n",
      "  }\n",
      "}\n",
      "layer {\n",
      "  name: \"conv3\"\n",
      "  type: \"Convolution\"\n",
      "  bottom: \"pool2\"\n",
      "  top: \"conv3\"\n",
      "  param {\n",
      "    lr_mult: 1\n",
      "  }\n",
      "  param {\n",
      "    lr_mult: 2\n",
      "  }\n",
      "  convolution_param {\n",
      "    num_output: 64\n",
      "    pad: 2\n",
      "    kernel_size: 5\n",
      "    stride: 1\n",
      "    weight_filler {\n",
      "      type: \"gaussian\"\n",
      "      std: 0.01\n",
      "    }\n",
      "    bias_filler {\n",
      "      type: \"constant\"\n",
      "    }\n",
      "  }\n",
      "}\n",
      "layer {\n",
      "  name: \"relu3\"\n",
      "  type: \"ReLU\"\n",
      "  bottom: \"conv3\"\n",
      "  top: \"conv3\"\n",
      "}\n",
      "layer {\n",
      "  name: \"pool3\"\n",
      "  type: \"Pooling\"\n",
      "  bottom: \"conv3\"\n",
      "  top: \"pool3\"\n",
      "  pooling_param {\n",
      "    pool: AVE\n",
      "    kernel_size: 3\n",
      "    stride: 2\n",
      "  }\n",
      "}\n",
      "layer {\n",
      "  name: \"ip1\"\n",
      "  type: \"InnerProduct\"\n",
      "  bottom: \"pool3\"\n",
      "  top: \"ip1\"\n",
      "  param {\n",
      "    lr_mult: 1\n",
      "  }\n",
      "  param {\n",
      "    lr_mult: 2\n",
      "  }\n",
      "  inner_product_param {\n",
      "    num_output: 64\n",
      "    weight_filler {\n",
      "      type: \"gaussian\"\n",
      "      std: 0.1\n",
      "    }\n",
      "    bias_filler {\n",
      "      type: \"constant\"\n",
      "    }\n",
      "  }\n",
      "}\n",
      "layer {\n",
      "  name: \"ip2\"\n",
      "  type: \"InnerProduct\"\n",
      "  bottom: \"ip1\"\n",
      "  top: \"ip2\"\n",
      "  param {\n",
      "    lr_mult: 1\n",
      "  }\n",
      "  param {\n",
      "    lr_mult: 2\n",
      "  }\n",
      "  inner_product_param {\n",
      "    num_output: 10\n",
      "    weight_filler {\n",
      "      type: \"gaussian\"\n",
      "      std: 0.1\n",
      "    }\n",
      "    bias_filler {\n",
      "      type: \"constant\"\n",
      "    }\n",
      "  }\n",
      "}\n",
      "layer {\n",
      "  name: \"accuracy\"\n",
      "  type: \"Accuracy\"\n",
      "  bottom: \"ip2\"\n",
      "  bottom: \"label\"\n",
      "  top: \"accuracy\"\n",
      "  include {\n",
      "    phase: TEST\n",
      "  }\n",
      "}\n",
      "layer {\n",
      "  name: \"loss\"\n",
      "  type: \"SoftmaxWithLoss\"\n",
      "  bottom: \"ip2\"\n",
      "  bottom: \"label\"\n",
      "  top: \"loss\"\n",
      "}\n",
      "I0706 08:16:26.740829 11565 layer_factory.hpp:74] Creating layer cifar\n",
      "I0706 08:16:26.740849 11565 net.cpp:76] Creating Layer cifar\n",
      "I0706 08:16:26.740859 11565 net.cpp:334] cifar -> data\n",
      "I0706 08:16:26.740872 11565 net.cpp:334] cifar -> label\n",
      "I0706 08:16:26.740885 11565 net.cpp:105] Setting up cifar\n",
      "I0706 08:16:26.740948 11565 db.cpp:34] Opened lmdb examples/cifar10/cifar10_test_lmdb\n",
      "I0706 08:16:26.740990 11565 data_layer.cpp:67] output data size: 100,3,32,32\n",
      "I0706 08:16:26.741005 11565 data_transformer.cpp:22] Loading mean file from: examples/cifar10/mean.binaryproto\n",
      "I0706 08:16:26.741613 11565 net.cpp:112] Top shape: 100 3 32 32 (307200)\n",
      "I0706 08:16:26.741638 11565 net.cpp:112] Top shape: 100 1 1 1 (100)\n",
      "I0706 08:16:26.741657 11565 layer_factory.hpp:74] Creating layer label_cifar_1_split\n",
      "I0706 08:16:26.741681 11565 net.cpp:76] Creating Layer label_cifar_1_split\n",
      "I0706 08:16:26.741693 11565 net.cpp:372] label_cifar_1_split <- label\n",
      "I0706 08:16:26.741704 11565 net.cpp:334] label_cifar_1_split -> label_cifar_1_split_0\n",
      "I0706 08:16:26.741717 11565 net.cpp:334] label_cifar_1_split -> label_cifar_1_split_1\n",
      "I0706 08:16:26.741729 11565 net.cpp:105] Setting up label_cifar_1_split\n",
      "I0706 08:16:26.741740 11565 net.cpp:112] Top shape: 100 1 1 1 (100)\n",
      "I0706 08:16:26.741750 11565 net.cpp:112] Top shape: 100 1 1 1 (100)\n",
      "I0706 08:16:26.741757 11565 layer_factory.hpp:74] Creating layer conv1\n",
      "I0706 08:16:26.741770 11565 net.cpp:76] Creating Layer conv1\n",
      "I0706 08:16:26.741780 11565 net.cpp:372] conv1 <- data\n",
      "I0706 08:16:26.741791 11565 net.cpp:334] conv1 -> conv1\n",
      "I0706 08:16:26.741802 11565 net.cpp:105] Setting up conv1\n",
      "I0706 08:16:26.742161 11565 net.cpp:112] Top shape: 100 32 32 32 (3276800)\n",
      "I0706 08:16:26.742204 11565 layer_factory.hpp:74] Creating layer pool1\n",
      "I0706 08:16:26.742229 11565 net.cpp:76] Creating Layer pool1\n",
      "I0706 08:16:26.742240 11565 net.cpp:372] pool1 <- conv1\n",
      "I0706 08:16:26.742251 11565 net.cpp:334] pool1 -> pool1\n",
      "I0706 08:16:26.742262 11565 net.cpp:105] Setting up pool1\n",
      "I0706 08:16:26.742401 11565 net.cpp:112] Top shape: 100 32 16 16 (819200)\n",
      "I0706 08:16:26.742422 11565 layer_factory.hpp:74] Creating layer relu1\n",
      "I0706 08:16:26.742444 11565 net.cpp:76] Creating Layer relu1\n",
      "I0706 08:16:26.742461 11565 net.cpp:372] relu1 <- pool1\n",
      "I0706 08:16:26.742482 11565 net.cpp:323] relu1 -> pool1 (in-place)\n",
      "I0706 08:16:26.742504 11565 net.cpp:105] Setting up relu1\n",
      "I0706 08:16:26.742555 11565 net.cpp:112] Top shape: 100 32 16 16 (819200)\n",
      "I0706 08:16:26.742568 11565 layer_factory.hpp:74] Creating layer conv2\n",
      "I0706 08:16:26.742579 11565 net.cpp:76] Creating Layer conv2\n",
      "I0706 08:16:26.742589 11565 net.cpp:372] conv2 <- pool1\n",
      "I0706 08:16:26.742599 11565 net.cpp:334] conv2 -> conv2\n",
      "I0706 08:16:26.742612 11565 net.cpp:105] Setting up conv2\n",
      "I0706 08:16:26.743754 11565 net.cpp:112] Top shape: 100 32 16 16 (819200)\n",
      "I0706 08:16:26.743794 11565 layer_factory.hpp:74] Creating layer relu2\n",
      "I0706 08:16:26.743818 11565 net.cpp:76] Creating Layer relu2\n",
      "I0706 08:16:26.743845 11565 net.cpp:372] relu2 <- conv2\n",
      "I0706 08:16:26.743857 11565 net.cpp:323] relu2 -> conv2 (in-place)\n",
      "I0706 08:16:26.743868 11565 net.cpp:105] Setting up relu2\n",
      "I0706 08:16:26.743927 11565 net.cpp:112] Top shape: 100 32 16 16 (819200)\n",
      "I0706 08:16:26.743940 11565 layer_factory.hpp:74] Creating layer pool2\n",
      "I0706 08:16:26.743953 11565 net.cpp:76] Creating Layer pool2\n",
      "I0706 08:16:26.743962 11565 net.cpp:372] pool2 <- conv2\n",
      "I0706 08:16:26.743971 11565 net.cpp:334] pool2 -> pool2\n",
      "I0706 08:16:26.743983 11565 net.cpp:105] Setting up pool2\n",
      "I0706 08:16:26.744057 11565 net.cpp:112] Top shape: 100 32 8 8 (204800)\n",
      "I0706 08:16:26.744081 11565 layer_factory.hpp:74] Creating layer conv3\n",
      "I0706 08:16:26.744101 11565 net.cpp:76] Creating Layer conv3\n",
      "I0706 08:16:26.744110 11565 net.cpp:372] conv3 <- pool2\n",
      "I0706 08:16:26.744122 11565 net.cpp:334] conv3 -> conv3\n",
      "I0706 08:16:26.744134 11565 net.cpp:105] Setting up conv3\n",
      "I0706 08:16:26.746137 11565 net.cpp:112] Top shape: 100 64 8 8 (409600)\n",
      "I0706 08:16:26.746176 11565 layer_factory.hpp:74] Creating layer relu3\n",
      "I0706 08:16:26.746198 11565 net.cpp:76] Creating Layer relu3\n",
      "I0706 08:16:26.746212 11565 net.cpp:372] relu3 <- conv3\n",
      "I0706 08:16:26.746227 11565 net.cpp:323] relu3 -> conv3 (in-place)\n",
      "I0706 08:16:26.746237 11565 net.cpp:105] Setting up relu3\n",
      "I0706 08:16:26.746373 11565 net.cpp:112] Top shape: 100 64 8 8 (409600)\n",
      "I0706 08:16:26.746392 11565 layer_factory.hpp:74] Creating layer pool3\n",
      "I0706 08:16:26.746409 11565 net.cpp:76] Creating Layer pool3\n",
      "I0706 08:16:26.746433 11565 net.cpp:372] pool3 <- conv3\n",
      "I0706 08:16:26.746455 11565 net.cpp:334] pool3 -> pool3\n",
      "I0706 08:16:26.746474 11565 net.cpp:105] Setting up pool3\n",
      "I0706 08:16:26.746536 11565 net.cpp:112] Top shape: 100 64 4 4 (102400)\n",
      "I0706 08:16:26.746548 11565 layer_factory.hpp:74] Creating layer ip1\n",
      "I0706 08:16:26.746559 11565 net.cpp:76] Creating Layer ip1\n",
      "I0706 08:16:26.746568 11565 net.cpp:372] ip1 <- pool3\n",
      "I0706 08:16:26.746580 11565 net.cpp:334] ip1 -> ip1\n",
      "I0706 08:16:26.746592 11565 net.cpp:105] Setting up ip1\n",
      "I0706 08:16:26.748831 11565 net.cpp:112] Top shape: 100 64 1 1 (6400)\n",
      "I0706 08:16:26.748863 11565 layer_factory.hpp:74] Creating layer ip2\n",
      "I0706 08:16:26.748886 11565 net.cpp:76] Creating Layer ip2\n",
      "I0706 08:16:26.748901 11565 net.cpp:372] ip2 <- ip1\n",
      "I0706 08:16:26.748916 11565 net.cpp:334] ip2 -> ip2\n",
      "I0706 08:16:26.748929 11565 net.cpp:105] Setting up ip2\n",
      "I0706 08:16:26.748965 11565 net.cpp:112] Top shape: 100 10 1 1 (1000)\n",
      "I0706 08:16:26.748982 11565 layer_factory.hpp:74] Creating layer ip2_ip2_0_split\n",
      "I0706 08:16:26.748993 11565 net.cpp:76] Creating Layer ip2_ip2_0_split\n",
      "I0706 08:16:26.749002 11565 net.cpp:372] ip2_ip2_0_split <- ip2\n",
      "I0706 08:16:26.749012 11565 net.cpp:334] ip2_ip2_0_split -> ip2_ip2_0_split_0\n",
      "I0706 08:16:26.749025 11565 net.cpp:334] ip2_ip2_0_split -> ip2_ip2_0_split_1\n",
      "I0706 08:16:26.749037 11565 net.cpp:105] Setting up ip2_ip2_0_split\n",
      "I0706 08:16:26.749047 11565 net.cpp:112] Top shape: 100 10 1 1 (1000)\n",
      "I0706 08:16:26.749054 11565 net.cpp:112] Top shape: 100 10 1 1 (1000)\n",
      "I0706 08:16:26.749063 11565 layer_factory.hpp:74] Creating layer accuracy\n",
      "I0706 08:16:26.749075 11565 net.cpp:76] Creating Layer accuracy\n",
      "I0706 08:16:26.749089 11565 net.cpp:372] accuracy <- ip2_ip2_0_split_0\n",
      "I0706 08:16:26.749106 11565 net.cpp:372] accuracy <- label_cifar_1_split_0\n",
      "I0706 08:16:26.749127 11565 net.cpp:334] accuracy -> accuracy\n",
      "I0706 08:16:26.749150 11565 net.cpp:105] Setting up accuracy\n",
      "I0706 08:16:26.749168 11565 net.cpp:112] Top shape: 1 1 1 1 (1)\n",
      "I0706 08:16:26.749178 11565 layer_factory.hpp:74] Creating layer loss\n",
      "I0706 08:16:26.749188 11565 net.cpp:76] Creating Layer loss\n",
      "I0706 08:16:26.749197 11565 net.cpp:372] loss <- ip2_ip2_0_split_1\n",
      "I0706 08:16:26.749207 11565 net.cpp:372] loss <- label_cifar_1_split_1\n",
      "I0706 08:16:26.749219 11565 net.cpp:334] loss -> loss\n",
      "I0706 08:16:26.749230 11565 net.cpp:105] Setting up loss\n",
      "I0706 08:16:26.749240 11565 layer_factory.hpp:74] Creating layer loss\n",
      "I0706 08:16:26.749312 11565 net.cpp:112] Top shape: 1 1 1 1 (1)\n",
      "I0706 08:16:26.749325 11565 net.cpp:118]     with loss weight 1\n",
      "I0706 08:16:26.749359 11565 net.cpp:163] loss needs backward computation.\n",
      "I0706 08:16:26.749377 11565 net.cpp:165] accuracy does not need backward computation.\n",
      "I0706 08:16:26.749392 11565 net.cpp:163] ip2_ip2_0_split needs backward computation.\n",
      "I0706 08:16:26.749408 11565 net.cpp:163] ip2 needs backward computation.\n",
      "I0706 08:16:26.749423 11565 net.cpp:163] ip1 needs backward computation.\n",
      "I0706 08:16:26.749433 11565 net.cpp:163] pool3 needs backward computation.\n",
      "I0706 08:16:26.749441 11565 net.cpp:163] relu3 needs backward computation.\n",
      "I0706 08:16:26.749449 11565 net.cpp:163] conv3 needs backward computation.\n",
      "I0706 08:16:26.749457 11565 net.cpp:163] pool2 needs backward computation.\n",
      "I0706 08:16:26.749464 11565 net.cpp:163] relu2 needs backward computation.\n",
      "I0706 08:16:26.749472 11565 net.cpp:163] conv2 needs backward computation.\n",
      "I0706 08:16:26.749480 11565 net.cpp:163] relu1 needs backward computation.\n",
      "I0706 08:16:26.749488 11565 net.cpp:163] pool1 needs backward computation.\n",
      "I0706 08:16:26.749495 11565 net.cpp:163] conv1 needs backward computation.\n",
      "I0706 08:16:26.749503 11565 net.cpp:165] label_cifar_1_split does not need backward computation.\n",
      "I0706 08:16:26.749511 11565 net.cpp:165] cifar does not need backward computation.\n",
      "I0706 08:16:26.749519 11565 net.cpp:201] This network produces output accuracy\n",
      "I0706 08:16:26.749528 11565 net.cpp:201] This network produces output loss\n",
      "I0706 08:16:26.749547 11565 net.cpp:446] Collecting Learning Rate and Weight Decay.\n",
      "I0706 08:16:26.749557 11565 net.cpp:213] Network initialization done.\n",
      "I0706 08:16:26.749565 11565 net.cpp:214] Memory required for data: 31987608\n",
      "I0706 08:16:26.749622 11565 solver.cpp:42] Solver scaffolding done.\n",
      "I0706 08:16:26.749667 11565 solver.cpp:222] Solving CIFAR10_quick\n",
      "I0706 08:16:26.749685 11565 solver.cpp:223] Learning Rate Policy: fixed\n",
      "I0706 08:16:26.749701 11565 solver.cpp:266] Iteration 0, Testing net (#0)\n",
      "I0706 08:16:57.933964 11565 solver.cpp:315]     Test net output #0: accuracy = 0.0903\n",
      "I0706 08:16:57.934160 11565 solver.cpp:315]     Test net output #1: loss = 2.3026 (* 1 = 2.3026 loss)\n",
      "I0706 08:16:58.744621 11565 solver.cpp:189] Iteration 0, loss = 2.30217\n",
      "I0706 08:16:58.744694 11565 solver.cpp:204]     Train net output #0: loss = 2.30217 (* 1 = 2.30217 loss)\n",
      "I0706 08:16:58.744721 11565 solver.cpp:470] Iteration 0, lr = 0.001\n",
      "I0706 08:18:17.090977 11565 solver.cpp:334] Snapshotting to examples/cifar10/cifar10_quick_cpu_iter_100.caffemodel\n",
      "I0706 08:18:17.092978 11565 solver.cpp:342] Snapshotting solver state to examples/cifar10/cifar10_quick_cpu_iter_100.solverstate\n",
      "I0706 08:18:17.402225 11565 solver.cpp:248] Iteration 100, loss = 1.71441\n",
      "I0706 08:18:17.402285 11565 solver.cpp:266] Iteration 100, Testing net (#0)\n",
      "I0706 08:18:48.195575 11565 solver.cpp:315]     Test net output #0: accuracy = 0.3761\n",
      "I0706 08:18:48.195724 11565 solver.cpp:315]     Test net output #1: loss = 1.74968 (* 1 = 1.74968 loss)\n",
      "I0706 08:18:48.195739 11565 solver.cpp:253] Optimization Done.\n",
      "I0706 08:18:48.195749 11565 caffe.cpp:121] Optimization Done.\n"
     ]
    }
   ],
   "source": [
    "!cd /home/ubuntu/caffe && ./build/tools/caffe train --solver=examples/cifar10/cifar10_quick_solver_cpu.prototxt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Each training iteration this time took about 0.8 seconds - approximately forty times slower."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Framework 2: Theano\n",
    "\n",
    "Theano is a Python DL library created at the University of Montreal.  Some benefits of Theano to the DL practioner and researcher are:\n",
    "* Theano provides a highly expressive way of defining and training DNNs as it is built as a general symbolic math library and offers automatic function differentiation - this means the sky's the limit for DNN architectures and training methods that can be defined without leaving Python  \n",
    "* Theano is still very fast due to a CUDA backend that enables GPU acceleration  \n",
    "* Theano is tightly integrated with Python's popular NumPy library making integration into data analytics workflows a breeze.\n",
    "* A number of lightweight Python libraries have been written on top of Theano to further simplify the DNN training process, e.g. [Lasagne](https://github.com/Lasagne/Lasagne) and [Keras](https://github.com/fchollet/keras)\n",
    "\n",
    "You may choose to use Theano as your DL framework if you fit the following profile:\n",
    "* You are a Python developer looking for a highly expressive DL framework\n",
    "* You wish to develop a wider range of DL applications than just CNNs for imagery by defining new layer types, training algorithms and objective functions without leaving Python\n",
    "\n",
    "#### Theano example\n",
    "\n",
    "In this example we're going to work with the well know [MNIST](http://yann.lecun.com/exdb/mnist/) dataset which consists of 28x28 pixel black and white images of handwritten digits.  Here are some examples:\n",
    "\n",
    "![](http://deeplearning.net/tutorial/_images/mnist_0.png) ![](http://deeplearning.net/tutorial/_images/mnist_1.png) ![](http://deeplearning.net/tutorial/_images/mnist_2.png) ![](http://deeplearning.net/tutorial/_images/mnist_3.png) ![](http://deeplearning.net/tutorial/_images/mnist_4.png) ![](http://deeplearning.net/tutorial/_images/mnist_5.png) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We start by importing some Python dependencies and then defining a Python class for Convolutional Layers with Max Pooling.  Don't worry too much about the details - we have included this here so you can see the symbolic math nature of Theano syntax.\n",
    "\n",
    "**WARNING!** It is important that you execute each of the following cells in order as they build upon each other. It is suggested you execute the cells before parsing through the code - some of them can take a minute or two to run.  Remember to watch the circle in the top-right of the window - while it is solid the cell is still executing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using gpu device 0: GRID K520\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "os.chdir('/home/ubuntu/notebook/DLIntro')\n",
    "import sys\n",
    "import timeit\n",
    "import numpy\n",
    "import theano\n",
    "import theano.tensor as T\n",
    "from theano.tensor.signal import downsample\n",
    "from theano.tensor.nnet import conv\n",
    "from logistic_sgd import LogisticRegression, load_data\n",
    "from mlp import HiddenLayer\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.cm as cm\n",
    "from utils import tile_raster_images\n",
    "from IPython import display\n",
    "\n",
    "class LeNetConvPoolLayer(object):\n",
    "    \"\"\"Pool Layer of a convolutional network \"\"\"\n",
    "\n",
    "    def __init__(self, rng, input, filter_shape, image_shape, poolsize=(2, 2)):\n",
    "\n",
    "        assert image_shape[1] == filter_shape[1]\n",
    "        self.input = input\n",
    "\n",
    "        # there are \"num input feature maps * filter height * filter width\"\n",
    "        # inputs to each hidden unit\n",
    "        fan_in = numpy.prod(filter_shape[1:])\n",
    "        # each unit in the lower layer receives a gradient from:\n",
    "        # \"num output feature maps * filter height * filter width\" /\n",
    "        #   pooling size\n",
    "        fan_out = (filter_shape[0] * numpy.prod(filter_shape[2:]) /\n",
    "                   numpy.prod(poolsize))\n",
    "        # initialize weights with random weights\n",
    "        W_bound = numpy.sqrt(6. / (fan_in + fan_out))\n",
    "        self.W = theano.shared(\n",
    "            numpy.asarray(\n",
    "                rng.uniform(low=-W_bound, high=W_bound, size=filter_shape),\n",
    "                dtype=theano.config.floatX\n",
    "            ),\n",
    "            borrow=True\n",
    "        )\n",
    "\n",
    "        # the bias is a 1D tensor -- one bias per output feature map\n",
    "        b_values = numpy.zeros((filter_shape[0],), dtype=theano.config.floatX)\n",
    "        self.b = theano.shared(value=b_values, borrow=True)\n",
    "\n",
    "        # convolve input feature maps with filters\n",
    "        conv_out = conv.conv2d(\n",
    "            input=input,\n",
    "            filters=self.W,\n",
    "            filter_shape=filter_shape,\n",
    "            image_shape=image_shape\n",
    "        )\n",
    "\n",
    "        # downsample each feature map individually, using maxpooling\n",
    "        pooled_out = downsample.max_pool_2d(\n",
    "            input=conv_out,\n",
    "            ds=poolsize,\n",
    "            ignore_border=True\n",
    "        )\n",
    "\n",
    "        # add the bias term. Since the bias is a vector (1D array), we first\n",
    "        # reshape it to a tensor of shape (1, n_filters, 1, 1). Each bias will\n",
    "        # thus be broadcasted across mini-batches and feature map\n",
    "        # width & height\n",
    "        self.output = T.tanh(pooled_out + self.b.dimshuffle('x', 0, 'x', 'x'))\n",
    "\n",
    "        # store parameters of this layer\n",
    "        self.params = [self.W, self.b]\n",
    "\n",
    "        # keep track of model input\n",
    "        self.input = input"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next we define our CNN training parameters:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "learning_rate=0.1\n",
    "dataset='/home/ubuntu/notebook/mnist.pkl.gz'\n",
    "nkerns=[100, 50]\n",
    "batch_size=128"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We now run some pre-built scripts to load the MNIST dataset and compute how many training batches we will have given our chosen batch size:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "... loading data\n",
      "... data loaded.\n"
     ]
    }
   ],
   "source": [
    "from logistic_sgd import load_data\n",
    "\n",
    "rng = numpy.random.RandomState(23455)\n",
    "\n",
    "datasets = load_data(dataset)\n",
    "\n",
    "train_set_x, train_set_y = datasets[0]\n",
    "valid_set_x, valid_set_y = datasets[1]\n",
    "test_set_x, test_set_y = datasets[2]\n",
    "\n",
    "# compute number of minibatches for training, validation and testing\n",
    "n_train_batches = train_set_x.get_value(borrow=True).shape[0]\n",
    "n_valid_batches = valid_set_x.get_value(borrow=True).shape[0]\n",
    "n_test_batches = test_set_x.get_value(borrow=True).shape[0]\n",
    "n_train_batches /= batch_size\n",
    "n_valid_batches /= batch_size\n",
    "n_test_batches /= batch_size\n",
    "\n",
    "n_epochs=10000/n_train_batches\n",
    "\n",
    "# allocate symbolic variables for the data\n",
    "index = T.lscalar()  # index to a [mini]batch\n",
    "x = T.matrix('x')   # the data is presented as rasterized images\n",
    "y = T.ivector('y')  # the labels are presented as 1D vector of\n",
    "                        # [int] labels\n",
    "    \n",
    "print '... data loaded.'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we define our actual CNN layer-by-layer - again, spend as much time as like reviewing the code to understand Theano's syntax, but don't worry if you don't understand all the details."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "... building the model\n",
      "... model built\n"
     ]
    }
   ],
   "source": [
    "print '... building the model'\n",
    "\n",
    "# Reshape matrix of rasterized images of shape (batch_size, 28 * 28)\n",
    "# to a 4D tensor, compatible with our LeNetConvPoolLayer\n",
    "# (28, 28) is the size of MNIST images.\n",
    "layer0_input = x.reshape((batch_size, 1, 28, 28))\n",
    "\n",
    "# Construct the first convolutional pooling layer:\n",
    "# filtering reduces the image size to (28-5+1 , 28-5+1) = (24, 24)\n",
    "# maxpooling reduces this further to (24/2, 24/2) = (12, 12)\n",
    "# 4D output tensor is thus of shape (batch_size, nkerns[0], 12, 12)\n",
    "layer0 = LeNetConvPoolLayer(\n",
    "    rng,\n",
    "    input=layer0_input,\n",
    "    image_shape=(batch_size, 1, 28, 28),\n",
    "    filter_shape=(nkerns[0], 1, 25, 25),\n",
    "    poolsize=(2, 2)\n",
    ")\n",
    "\n",
    "# Construct the second convolutional pooling layer\n",
    "# filtering reduces the image size to (12-5+1, 12-5+1) = (8, 8)\n",
    "# maxpooling reduces this further to (8/2, 8/2) = (4, 4)\n",
    "# 4D output tensor is thus of shape (batch_size, nkerns[1], 4, 4)\n",
    "#layer1 = LeNetConvPoolLayer(\n",
    "#    rng,\n",
    "#    input=layer0.output,\n",
    "#    image_shape=(batch_size, nkerns[0], 9, 9),\n",
    "#    filter_shape=(nkerns[1], nkerns[0], 4, 4),\n",
    "#    poolsize=(2, 2)\n",
    "#)\n",
    "\n",
    "# the HiddenLayer being fully-connected, it operates on 2D matrices of\n",
    "# shape (batch_size, num_pixels) (i.e matrix of rasterized images).\n",
    "# This will generate a matrix of shape (batch_size, nkerns[1] * 4 * 4),\n",
    "# or (500, 50 * 4 * 4) = (500, 800) with the default values.\n",
    "layer2_input = layer0.output.flatten(2)\n",
    "\n",
    "# construct a fully-connected sigmoidal layer\n",
    "layer2 = HiddenLayer(\n",
    "    rng,\n",
    "    input=layer2_input,\n",
    "    n_in=nkerns[0] * 2 * 2,\n",
    "    n_out=50,\n",
    "    activation=T.tanh\n",
    ")\n",
    "\n",
    "# classify the values of the fully-connected sigmoidal layer\n",
    "layer3 = LogisticRegression(input=layer2.output, n_in=50, n_out=10)\n",
    "\n",
    "# the cost we minimize during training is the NLL of the model\n",
    "cost = layer3.negative_log_likelihood(y)\n",
    "\n",
    "# create a function to compute the mistakes that are made by the model\n",
    "test_model = theano.function(\n",
    "    [index],\n",
    "    layer3.errors(y),\n",
    "    givens={\n",
    "        x: test_set_x[index * batch_size: (index + 1) * batch_size],\n",
    "        y: test_set_y[index * batch_size: (index + 1) * batch_size]\n",
    "    }\n",
    ")\n",
    "\n",
    "validate_model = theano.function(\n",
    "    [index],\n",
    "    layer3.errors(y),\n",
    "    givens={\n",
    "        x: valid_set_x[index * batch_size: (index + 1) * batch_size],\n",
    "        y: valid_set_y[index * batch_size: (index + 1) * batch_size]\n",
    "    }\n",
    ")\n",
    "\n",
    "# create a list of all model parameters to be fit by gradient descent\n",
    "params = layer3.params + layer2.params + layer0.params\n",
    "\n",
    "# create a list of gradients for all model parameters\n",
    "grads = T.grad(cost, params)\n",
    "\n",
    "# train_model is a function that updates the model parameters by\n",
    "# SGD Since this model has many parameters, it would be tedious to\n",
    "# manually create an update rule for each model parameter. We thus\n",
    "# create the updates list by automatically looping over all\n",
    "# (params[i], grads[i]) pairs.\n",
    "updates = [\n",
    "    (param_i, param_i - learning_rate * grad_i)\n",
    "    for param_i, grad_i in zip(params, grads)\n",
    "]\n",
    "\n",
    "train_model = theano.function(\n",
    "    [index],\n",
    "    cost,\n",
    "    updates=updates,\n",
    "    givens={\n",
    "        x: train_set_x[index * batch_size: (index + 1) * batch_size],\n",
    "        y: train_set_y[index * batch_size: (index + 1) * batch_size]\n",
    "    }\n",
    ")\n",
    "print '... model built'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can actually train the CNN. After each iteration you will see an updated visualization of the learned feature layers in the network - this will allow you to see what the network is learning to look for to differentiate the digit classes.  Note that the training cost displayed during training is not easily interpretable in terms of the actual network performance, but as a relative measure you should see it decreasing as the networks learns.  After executing this cell, scroll down to see the training in action!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "###############\n",
    "# TRAIN MODEL #\n",
    "###############\n",
    "%matplotlib inline\n",
    "print '... training'\n",
    "# early-stopping parameters\n",
    "patience = 10000  # look as this many examples regardless\n",
    "patience_increase = 2  # wait this much longer when a new best is\n",
    "                           # found\n",
    "improvement_threshold = 0.995  # a relative improvement of this much is\n",
    "                                   # considered significant\n",
    "validation_frequency = min(n_train_batches, patience / 2)\n",
    "                                  # go through this many\n",
    "                                  # minibatche before checking the network\n",
    "                                  # on the validation set; in this case we\n",
    "                                  # check every epoch\n",
    "\n",
    "best_validation_loss = numpy.inf\n",
    "best_iter = 0\n",
    "test_score = 0.\n",
    "start_time = timeit.default_timer()\n",
    "\n",
    "epoch = 0\n",
    "done_looping = False\n",
    "\n",
    "while (epoch < n_epochs) and (not done_looping):\n",
    "    epoch = epoch + 1\n",
    "    for minibatch_index in xrange(n_train_batches):\n",
    "\n",
    "        iter = (epoch - 1) * n_train_batches + minibatch_index\n",
    "\n",
    "        if iter % 100 == 0:\n",
    "            print 'training @ iter = ', iter\n",
    "        cost_ij = train_model(minibatch_index)\n",
    "\n",
    "        if (iter + 1) % validation_frequency == 0:\n",
    "\n",
    "            # compute zero-one loss on validation set\n",
    "            validation_losses = [validate_model(i) for i\n",
    "                                    in xrange(n_valid_batches)]\n",
    "            this_validation_loss = numpy.mean(validation_losses)\n",
    "            print('epoch %i, minibatch %i/%i, validation error %f %%' %\n",
    "                    (epoch, minibatch_index + 1, n_train_batches,\n",
    "                    this_validation_loss * 100.))\n",
    "\n",
    "            # if we got the best validation score until now\n",
    "            if this_validation_loss < best_validation_loss:\n",
    "\n",
    "                #improve patience if loss improvement is good enough\n",
    "                if this_validation_loss < best_validation_loss *  \\\n",
    "                    improvement_threshold:\n",
    "                    patience = max(patience, iter * patience_increase)\n",
    "\n",
    "                # save best validation score and iteration number\n",
    "                best_validation_loss = this_validation_loss\n",
    "                best_iter = iter\n",
    "\n",
    "                # test it on the test set\n",
    "                test_losses = [\n",
    "                    test_model(i)\n",
    "                    for i in xrange(n_test_batches)\n",
    "                ]\n",
    "                test_score = numpy.mean(test_losses)\n",
    "                print(('     epoch %i, minibatch %i/%i, test error of '\n",
    "                        'best model %f %%') %\n",
    "                        (epoch, minibatch_index + 1, n_train_batches,\n",
    "                        test_score * 100.))\n",
    "                \n",
    "    display.clear_output()\n",
    "    plt.imshow(tile_raster_images(\n",
    "    X = layer0.W.get_value(borrow=True),\n",
    "    img_shape=(25,25),\n",
    "    tile_shape=(10,10),\n",
    "    tile_spacing=(1,1)), \n",
    "    cmap= cm.Greys_r,\n",
    "    aspect='auto')\n",
    "    plt.axis('off')\n",
    "    plt.title('Layer 0 convolutional filters, training cost: ' + str(test_score * 100))\n",
    "    plt.show()\n",
    "    plt.imshow(layer2.W.get_value(borrow=True)[:,:].T, \n",
    "    cmap= cm.Greys_r)\n",
    "    plt.axis('off')\n",
    "    plt.title('Layer 1 fully connected weights, training cost: ' + str(test_score * 100))   \n",
    "    plt.show()\n",
    "    plt.imshow(layer3.W.get_value(borrow=True)[:,:].T, \n",
    "    cmap= cm.Greys_r)\n",
    "    plt.axis('off')\n",
    "    plt.title('Layer 2 fully connected weights, training cost: ' + str(test_score * 100))   \n",
    "    plt.show()\n",
    "\n",
    "    if patience <= iter:\n",
    "        done_looping = True\n",
    "        break\n",
    "\n",
    "end_time = timeit.default_timer()\n",
    "print('Optimization complete.')\n",
    "print('Best validation score of %f %% obtained at iteration %i, '\n",
    "        'with test performance %f %%' %\n",
    "        ((1 - best_validation_loss) * 100., best_iter + 1, (1 - test_score) * 100.))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You will see that after 10000 training iterations the classification accuracy against the test set is over 98%.  You may have noticed during training that the convolutional filters came to much more closely resemble line segments that make up the hand written digits and the layer 2 connection weights became more polarized suggesting that the network was learning specific grouping of filters which were significant for each of the digits."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can read much more about this example and others in the excellent tutorials created by the Theano developers available [here](http://deeplearning.net/tutorial/). "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Framework 3: Torch\n",
    "\n",
    "\n",
    "Torch is a scientific computing framework based on the programming language Lua but with a highly optimized C/CUDA backend.  Torch is maintained by a group of research scientists from Facebook, Twitter and Google but also has an community of contributors to the open-source project.\n",
    "\n",
    "Benefits of of Torch:\n",
    "* Efficient Tensor library (like NumPy) with an efficient CUDA backend which lends itself well to DNN computations\n",
    "* Dedicated Neural Networks package -- build arbitrary acyclic computation graphs with automatic differentiation\n",
    "also with fast CUDA and CPU backends\n",
    "* Good community and industry support - several hundred community-built and maintained packages - active contribution from web scale companies, e.g. Facebook\n",
    "* Easy to use Multi-GPU support and distribution of neural network training\n",
    "\n",
    "The Lua scripting language is fast due to Just In Time (JIT) compilation and is a lot like Javascript in syntax.\n",
    "\n",
    "You may choose to use Torch as your DL framework if you fit the following profile:\n",
    "* You are very concerned about run-time speed, but still want the convenience of a scripting interface\n",
    "* You wish to use multiple GPUs for training\n",
    "\n",
    "#### Torch example\n",
    "\n",
    "DL is not only applicable to image data, there have been many recent successes applying DL to understanding natural language text.    One important class of DNNs for natural language understanding is called Recurrent Neural Networks (RNNs).  RNNs extend the standard multi-layer DNN with a temporal memory component that means the network can learn sequential patterns in input data.  This works by having the hidden layers in the network receive both a new data sample as well as their state at the previous time step as input at each iteration. This means that RNNs can learn functions such as time-series forecasting, music generation, natural language word sequences and character level text sequence prediction.  In the example below you see an RNN receiving the sequence \"Hello world!\" as training input in three character windows with a stride of three characters.\n",
    "\n",
    "![RNN](files/DLIntro/rnn.png)\n",
    "\n",
    "<div align=\"center\">*Figure 7:  Recurrent Neural Networks introduce a self-connection to the hidden nodes; this allows the network to remember it's previous states and subsequently learn significant predictive patterns in the input data.*</div> \n",
    "\n",
    "In this example we will show that an RNN built in Torch and trained on a variety of corpora of different styles of text is able to learn to generate random character sequence that retain the appropriate style, vocabulary, punctuation and formatting.  Given a large volume of training text (between 1.1 and 6.2 million training characters per model) the model learns to predict the next character in a partial character sequence; this means the model can generate original text conforming to the same style as the text it has been trained on.\n",
    "\n",
    "Training the RNN capable of generating this style appropriate text takes about an hour per text corpus on an NVIDIA GRID K520 GPU running Torch.  Training the same network on a CPU would take about 100 times as long.  We have already done that GPU training for you. We made use of the excellent [code](https://github.com/karpathy/char-rnn) written by Andrej Karpathy, a graduate student at Stanford. We highly recommend reading Andrej's fascinating blog post associated with this code describing [The Unreasonable Effectiveness of RNNs](http://karpathy.github.io/2015/05/21/rnn-effectiveness/).  \n",
    "\n",
    "Edit the style variable in the cell below to choose a trained network and then run it to see the Torch based RNN randomly generate text in one of the following styles:  William Shakespeare, Leo Tolstoy, President Barack Obama's speech writers or the Linux kernal source code authors.  You can also try increasing the `-length` input to get more text, but it will take longer to generate.\n",
    "\n",
    "**NOTE** If you try the `linux` style, the output will be randomly generated text (character by character) that looks like kernel source code. This is not an error!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[0musing CUDA on GPU 0...\u001b[0m\t\n",
      "\u001b[0mcreating an LSTM...\u001b[0m\t\n",
      "\u001b[0mseeding with  \u001b[0m\t\n",
      "\u001b[0m--------------------------\u001b[0m\t\n",
      " Rome, my dear fellow look at\r\n",
      "one along this something devoted and clearly, went on before all his\r\n",
      "conversation of the old man's battery, and althtallies cannot help grow, because it\r\n",
      "was always directing as if they saw the grandeurans\r\n",
      "who had glumted his head and husband who had rode off to himself. Everybody was\r\n",
      "beaten as much way of laughter.\r\n",
      "\r\n",
      "\"That's all they've let the regiment. And my time onto, go beggn it in front!\"\r\n",
      "\r\n",
      "Princess Mary could not call at that love of being a few incompr\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "style='tolstoy'  # Choose from: tinyshakespeare, tolstoy, obama, linux\n",
    "cd /home/ubuntu/notebook/DLIntro/char-rnn/\n",
    "th sample.lua checkpoints/$style/checkpoint.t7 -gpuid 0 -length 500 -primetext ' '"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Remember there was nothing changed in the structure of the RNN to learn each of these different styles except for the data that was use for training.  This generated text is entirely random (and meaningless) in the specific words chosen and it is not generate from complete sentences sampled from the original input; rather it is a sequence of characters generated one at a time, which makes it astonishing that it conforms to style so well."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## DIGITS\n",
    "\n",
    "DIGITS is a **D**eep Learning **G**PU **T**raining **S**ystem developed by NVIDIA to help researchers and analysts to easily develop, train and test CNNs.  DIGITS is also a visualization tool that enables real-time visualization of important metrics during CNN training.  DIGITS uses the Caffe framework which we saw above for CNN training.\n",
    "\n",
    "The DIGITS dashboard lets researchers manage their training datasets and training of DNNs.  It also makes it easy to explore and test what your DNN has learned.\n",
    "\n",
    "Most recently in DIGITS 2, DIGITS can manage multiple GPUs in a single machine and distribute training of a single DNN across those GPUs for significant training speed increases.\n",
    "\n",
    "![](files/DLIntro/digits_dashboard.png)\n",
    "\n",
    "<div align=\"center\">*Figure 8:  Interface to the NVIDIA DIGITS Deep Learning tool.*</div>\n",
    "\n",
    "DIGITS is a great place to get started learning more about Deep Learning and the practicalities of training DNNs.  There is a webinar and associated Qwiklab focused on DIGITS coming soon.  Register [here](https://developer.nvidia.com/deep-learning-courses)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## More information\n",
    "\n",
    "To learn more about these topics, please visit:\n",
    "* GPU accelerated machine learning: [http://www.nvidia.com/object/machine-learning.html](http://www.nvidia.com/object/machine-learning.html)\n",
    "* Caffe: [http://caffe.berkeleyvision.org/](http://caffe.berkeleyvision.org/)\n",
    "* Theano: [http://deeplearning.net/software/theano/](http://deeplearning.net/software/theano/)\n",
    "* Torch: [http://torch.ch/](http://torch.ch/)\n",
    "* DIGITS: [https://developer.nvidia.com/digits](https://developer.nvidia.com/digits)\n",
    "* cuDNN: [https://developer.nvidia.com/cudnn](https://developer.nvidia.com/cudnn)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Post-Lab Summary\n",
    "\n",
    "If you would like to download this lab for later viewing, it is recommend you go to your browsers File menu (not the Jupyter notebook file menu) and save the complete web page.  This will ensure the images are copied down as well.\n",
    "\n",
    "### Deep Learning Lab Series\n",
    "\n",
    "Make sure to check out the rest of the classes in this Deep Learning lab series.  You can find them [here](https://developer.nvidia.com/deep-learning-courses)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Summary\n",
    "\n",
    "In this class we have shown that there are a variety of exciting applications of DL that are accesible today through the open-source frameworks Caffe, Theano and Torch.  Each of these frameworks has their own unique advantages and are better suited to different types of user and application.  Hopefully this tour has given you some insight into which frameworks may best suit your research or development needs.  In the coming weeks we will be releasing more classes which dive deeper into the specific workings of each of these frameworks."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
